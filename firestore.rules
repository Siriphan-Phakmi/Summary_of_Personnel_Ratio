rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Base functions for checking authentication
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isDeveloper() {
      return isAuthenticated() &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'developer';
    }
    
    function isApprover() {
      return isAuthenticated() &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'approver';
    }
    
    function hasUserAccess(userId) {
      return isAuthenticated() && 
        (request.auth.uid == userId || isAdmin());
    }
    
    function hasWardAccess(wardId) {
      return isAuthenticated() &&
        (
          isAdmin() || isDeveloper() || isApprover() || 
          (
            exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
            (
              wardId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.location ||
              'ALL' in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.location
            )
          )
        );
    }
    
    function isValidUser() {
      let data = request.resource.data;
      return data.username is string &&
        (data.role == 'admin' || data.role == 'nurse' || data.role == 'approver' || data.role == 'developer') &&
        data.firstName is string &&
        data.lastName is string &&
        data.active is bool;
    }
    
    function isValidRole(data) {
      return 
        (data.role == 'admin' || data.role == 'nurse' || data.role == 'approver' || data.role == 'developer') &&
        data.active is bool;
    }
    
    // Database access for developer
    function canManageDatabase() {
      return isAdmin() || isDeveloper();
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated() && (request.auth.uid == userId || isAdmin() || isDeveloper());
      allow create: if canManageDatabase();
      allow update: if isAuthenticated() && (request.auth.uid == userId || canManageDatabase());
      allow delete: if canManageDatabase();
    }
    
    // Sessions collection
    match /sessions/{sessionId} {
      allow read: if isAuthenticated() && (
        request.resource.data.userId == request.auth.uid || canManageDatabase()
      );
      allow create, update: if isAuthenticated();
      allow delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || canManageDatabase()
      );
    }
    
    // Current Sessions collection
    match /currentSessions/{userId} {
      allow read: if isAuthenticated() && (userId == request.auth.uid || canManageDatabase());
      allow create, update: if isAuthenticated() && (userId == request.auth.uid);
      allow delete: if isAuthenticated() && (userId == request.auth.uid || canManageDatabase());
    }
    
    // Ward Forms
    match /wardForms/{formId} {
      allow read: if isAuthenticated() &&
        (canManageDatabase() || isApprover() || hasWardAccess(resource.data.wardId));
      
      allow create: if isAuthenticated() &&
        (hasWardAccess(request.resource.data.wardId));
      
      allow update: if isAuthenticated() &&
        (
          // ผู้ที่สร้างแบบฟอร์มสามารถอัพเดทได้เฉพาะแบบฟอร์มฉบับร่าง
          (
            resource.data.isDraft == true && 
            resource.data.createdBy == request.auth.uid &&
            hasWardAccess(resource.data.wardId)
          ) ||
          // ผู้อนุมัติสามารถอัพเดทสถานะเป็น approved หรือ rejected ได้
          (
            isApprover() &&
            hasWardAccess(resource.data.wardId) &&
            (request.resource.data.status == 'approved' || request.resource.data.status == 'rejected')
          ) ||
          // Admin และ Developer จัดการได้ทุกอย่าง
          canManageDatabase()
        );
      
      allow delete: if canManageDatabase();
    }
    
    // Approvals
    match /approvals/{approvalId} {
      allow read: if isAuthenticated() &&
        (canManageDatabase() || isApprover() || hasWardAccess(resource.data.wardId));
      
      allow create, update: if isAuthenticated() &&
        (isApprover() && hasWardAccess(request.resource.data.wardId) || canManageDatabase());
      
      allow delete: if canManageDatabase();
    }
    
    // Daily Summaries
    match /dailySummaries/{summaryId} {
      allow read: if isAuthenticated() && 
        (canManageDatabase() || isApprover() || hasWardAccess(resource.data.wardId));
      
      allow create, update: if isAuthenticated() &&
        (isApprover() && hasWardAccess(request.resource.data.wardId) || canManageDatabase());
      
      allow delete: if canManageDatabase();
    }
    
    // Wards
    match /wards/{wardId} {
      allow read: if isAuthenticated();
      allow write: if canManageDatabase();
    }
    
    // System Logs (multiple collection names for different log types)
    match /systemLogs/{logId} {
      allow read: if canManageDatabase();
      allow create: if isAuthenticated();
      allow update, delete: if false; // ไม่อนุญาตให้แก้ไขหรือลบบันทึกใด ๆ
    }
    
    match /system_logs/{logId} {
      allow read: if canManageDatabase();
      allow create: if isAuthenticated();
      allow update, delete: if false;
    }
    
    match /user_activity_logs/{logId} {
      allow read: if canManageDatabase();
      allow create: if isAuthenticated();
      allow update, delete: if false;
    }
    
    match /userManagementLogs/{logId} {
      allow read: if canManageDatabase();
      allow create: if isAuthenticated();
      allow update, delete: if false;
    }
    
    // Any other collection access for developers and admins
    match /{collection}/{document=**} {
      allow read, write: if canManageDatabase() && collection != 'users';
    }
    
    // Helper function to get user data (assuming 'users' collection stores roles)
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }
    
    // ฟังก์ชันตรวจสอบว่าฟิลด์ที่กำลังอัปเดทเป็นฟิลด์ที่อนุญาตให้ผู้ใช้อัปเดทเองได้หรือไม่
    // เช่น lastActive, lastLogin, displayName สามารถอัปเดทได้
    // แต่ role, isActive เป็นต้น ต้องอัปเดทโดย admin เท่านั้น
    function isUpdatingAllowedFields(data) {
      // ตรวจสอบว่าฟิลด์ที่กำลังอัปเดทเป็นฟิลด์ที่อนุญาตให้ผู้ใช้อัปเดทเองได้หรือไม่
      let allowedFields = ['lastActive', 'lastLogin', 'displayName', 'sessions', 'userAgent', 'browser', 'deviceInfo', 'lastUpdated'];
      let requestKeys = request.resource.data.diff(resource.data).affectedKeys();
      return requestKeys.hasOnly(allowedFields);
    }
    
    function canWriteWardForm(request, resource) {
        // ตรวจสอบว่าผู้ใช้มีสิทธิ์ในการเขียนฟอร์มของวอร์ดนั้นหรือไม่
        // และตรวจสอบสถานะของฟอร์ม ถ้าเป็น 'finalized' แล้วจะไม่สามารถแก้ไขได้
        // ยกเว้น admin หรือ approver
        return getUserData(request.auth.uid).wards.hasAny(request.resource.data.wardId) && 
               (resource == null || resource.data.status != 'finalized' || 
               getUserData(request.auth.uid).role == 'admin' ||
               getUserData(request.auth.uid).role == 'approver');
    }
  }
} 