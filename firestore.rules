rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Base functions for checking authentication
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function hasUserAccess(userId) {
      return isAuthenticated() && 
        (request.auth.uid == userId || isAdmin());
    }
    
    function hasWardAccess(wardId) {
      return isAuthenticated() &&
        (
          isAdmin() || 
          (
            exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
            wardId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.wards
          )
        );
    }
    
    function isValidUser() {
      let data = request.resource.data;
      return data.email is string &&
        data.username is string &&
        (data.role == 'admin' || data.role == 'user' || data.role == 'approver') &&
        data.firstName is string &&
        data.lastName is string &&
        data.active is bool;
    }
    
    // Users collection: Allow read/write only if UID matches or user is admin
    match /users/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || getUserData(request.auth.uid).role == 'admin');
      // Admins can potentially update any user's role/active status
      allow write: if request.auth != null && getUserData(request.auth.uid).role == 'admin';
      // Allow user to update their own non-critical fields (e.g., maybe lastActive - adjust as needed)
      allow update: if request.auth != null && request.auth.uid == userId && isUpdatingAllowedFields(request.resource.data);
    }
    
    // Ward Forms
    match /wardForms/{formId} {
      allow read: if isAuthenticated() &&
        (isAdmin() || hasWardAccess(resource.data.wardId));
      allow create: if isAuthenticated() &&
        (hasWardAccess(request.resource.data.wardId));
      allow update: if isAuthenticated() &&
        (
          (
            resource.data.status == 'draft' && 
            resource.data.createdBy == request.auth.uid &&
            hasWardAccess(resource.data.wardId)
          ) ||
          isAdmin() ||
          (
            exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
            get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'approver' &&
            (request.resource.data.status == 'approved' || request.resource.data.status == 'rejected')
          )
        );
      allow delete: if isAdmin();
    }
    
    // Ward Definitions
    match /wards/{wardId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // System Logs - only admin can read, system functions can write
    match /systemLogs/{logId} {
      allow read: if isAdmin();
      allow create: if isAuthenticated();
      allow update, delete: if false;
    }
    
    // Daily Summaries
    match /dailySummaries/{summaryId} {
      allow read: if isAuthenticated() && 
        (isAdmin() || hasWardAccess(resource.data.wardId));
      allow create, update: if isAuthenticated() &&
        (hasWardAccess(request.resource.data.wardId) || isAdmin());
      allow delete: if isAdmin();
    }
    
    // User Sessions (optional if stored in Firestore)
    match /userSessions/{userId}/{sessionId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // ApprovalData collection: Allow read based on user's ward or admin, write only for admins
    match /approvalData/{approvalId} {
       allow read: if request.auth != null && (getUserData(request.auth.uid).role == 'admin' || getUserData(request.auth.uid).wards.hasAny(resource.data.wardId));
       allow write: if request.auth != null && getUserData(request.auth.uid).role == 'admin'; // Only admins can approve/edit
    }
    
    // Logs collection: Allow read based on user's role
    match /logs/{logId} {
       allow create: if request.auth != null; // Allow any authenticated user to create logs
       allow read: if request.auth != null && getUserData(request.auth.uid).role == 'admin'; // Only admins can read logs
    }
    
    // Helper function to get user data (assuming 'users' collection stores roles)
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }
    
    // Placeholder for more complex logic
    function isUpdatingAllowedFields(data) {
      // Example: Check if only specific fields like 'lastActive' are being updated
      return data.keys().hasOnly(['lastActive']); // Adjust field names
    }
    function canWriteWardForm(request, resource) {
        // Example: Check if user belongs to the ward and maybe if the form is not yet 'finalized'
        // This logic needs refinement based on your specific state management (e.g., 'status' field)
        return getUserData(request.auth.uid).wards.hasAny(request.resource.data.wardId); // Add more conditions
    }
  }
} 