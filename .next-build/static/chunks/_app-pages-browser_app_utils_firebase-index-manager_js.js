"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_app_utils_firebase-index-manager_js"],{

/***/ "(app-pages-browser)/./app/utils/firebase-index-manager.js":
/*!*********************************************!*\
  !*** ./app/utils/firebase-index-manager.js ***!
  \*********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handleIndexError: () => (/* binding */ handleIndexError),\n/* harmony export */   safeQuery: () => (/* binding */ safeQuery),\n/* harmony export */   validateFirestoreIndex: () => (/* binding */ validateFirestoreIndex),\n/* harmony export */   validateRequiredIndexes: () => (/* binding */ validateRequiredIndexes)\n/* harmony export */ });\n/* harmony import */ var _lib_firebase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/firebase */ \"(app-pages-browser)/./app/lib/firebase.js\");\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! firebase/firestore */ \"(app-pages-browser)/./node_modules/firebase/firestore/dist/esm/index.esm.js\");\n/* harmony import */ var _alertService__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./alertService */ \"(app-pages-browser)/./app/utils/alertService.js\");\n/* __next_internal_client_entry_do_not_use__ validateFirestoreIndex,handleIndexError,safeQuery,validateRequiredIndexes auto */ \n\n\n/**\r\n * ฟังก์ชันสำหรับตรวจสอบและจัดการ Firebase Index Error\r\n */ // เก็บประวัติ indexes ที่ได้รับการตรวจสอบแล้ว\nconst validatedIndexes = new Set();\n// ฟังก์ชันตรวจสอบ query ว่าต้องการ index หรือไม่โดยทำการทดสอบ query ขนาดเล็ก\nconst validateFirestoreIndex = async function(collectionPath, conditions) {\n    let orderByFields = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];\n    try {\n        // สร้างรหัสเฉพาะสำหรับ query นี้\n        const queryId = generateQueryId(collectionPath, conditions, orderByFields);\n        // ถ้าเคยตรวจสอบแล้ว ไม่ต้องตรวจสอบอีก\n        if (validatedIndexes.has(queryId)) {\n            return {\n                success: true,\n                validated: true\n            };\n        }\n        // สร้าง query ขนาดเล็กสำหรับทดสอบ\n        const testQuery = buildTestQuery(collectionPath, conditions, orderByFields);\n        // ทดลองดึงข้อมูล 1 รายการเพื่อตรวจสอบว่ามี index error หรือไม่\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(testQuery);\n        // ถ้าสำเร็จ เพิ่มเข้าไปในรายการที่ตรวจสอบแล้ว\n        validatedIndexes.add(queryId);\n        return {\n            success: true,\n            validated: true\n        };\n    } catch (error) {\n        console.error('Firebase Index Validation Error:', error);\n        // ตรวจสอบว่าเป็น index error หรือไม่\n        if (error.message && error.message.includes('requires an index')) {\n            // แยก URL สำหรับสร้าง index จาก error message\n            const indexUrl = extractIndexUrl(error.message);\n            return {\n                success: false,\n                isIndexError: true,\n                message: error.message,\n                indexUrl\n            };\n        }\n        // กรณีเป็น error อื่นๆ\n        return {\n            success: false,\n            isIndexError: false,\n            message: error.message\n        };\n    }\n};\n// สร้าง Query ID เพื่อใช้เป็น key ในการเก็บประวัติ\nconst generateQueryId = (collectionPath, conditions, orderByFields)=>{\n    const conditionsStr = conditions.map((c)=>\"\".concat(c.field, \"_\").concat(c.operator, \"_\").concat(c.value)).join('|');\n    const orderByStr = orderByFields.join('|');\n    return \"\".concat(collectionPath, \"_\").concat(conditionsStr, \"_\").concat(orderByStr);\n};\n// สร้าง test query สำหรับตรวจสอบ\nconst buildTestQuery = (collectionPath, conditions, orderByFields)=>{\n    let baseQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(_lib_firebase__WEBPACK_IMPORTED_MODULE_0__.db, collectionPath), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.limit)(1));\n    // เพิ่มเงื่อนไข where\n    conditions.forEach((condition)=>{\n        baseQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(baseQuery, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(condition.field, condition.operator, condition.value));\n    });\n    // เพิ่ม orderBy ถ้ามี\n    if (orderByFields.length > 0) {\n        const { orderBy } = __webpack_require__(/*! firebase/firestore */ \"(app-pages-browser)/./node_modules/firebase/firestore/dist/index.cjs.js\");\n        orderByFields.forEach((field)=>{\n            if (typeof field === 'object') {\n                baseQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(baseQuery, orderBy(field.field, field.direction));\n            } else {\n                baseQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(baseQuery, orderBy(field));\n            }\n        });\n    }\n    return baseQuery;\n};\n// แยก URL สำหรับสร้าง index จาก error message\nconst extractIndexUrl = (errorMessage)=>{\n    const urlMatch = errorMessage.match(/(https:\\/\\/console\\.firebase\\.google\\.com\\S+)/);\n    return urlMatch && urlMatch[1] ? urlMatch[1] : null;\n};\n// ฟังก์ชันช่วยแสดง dialog เมื่อพบ index error\nconst handleIndexError = async function(error) {\n    let autoOpen = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n    // ตรวจสอบว่าเป็น index error หรือไม่\n    if (error.message && error.message.includes('requires an index')) {\n        const indexUrl = extractIndexUrl(error.message);\n        if (indexUrl) {\n            // แสดง dialog พร้อมลิงก์ไปยังหน้าสร้าง index\n            const result = await _alertService__WEBPACK_IMPORTED_MODULE_2__.Swal.fire({\n                title: 'ต้องสร้าง Index ใน Firebase',\n                html: '\\n          <p>การค้นหาข้อมูลนี้ต้องการ index เพิ่มเติม</p>\\n          <p>คลิกปุ่ม \"สร้าง Index\" เพื่อสร้าง index ใน Firebase Console</p>\\n          <p>หลังจากสร้างแล้ว ให้กลับมารีเฟรชหน้านี้</p>\\n          <div class=\"mt-4\">\\n            <a href=\"'.concat(indexUrl, '\" target=\"_blank\" rel=\"noopener noreferrer\" \\n               class=\"px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600\">\\n              สร้าง Index\\n            </a>\\n          </div>\\n        '),\n                icon: 'warning',\n                showCancelButton: true,\n                confirmButtonText: 'รีเฟรชหน้านี้',\n                cancelButtonText: 'ยกเลิก',\n                confirmButtonColor: '#0ab4ab'\n            });\n            // เปิด URL ในแท็บใหม่โดยอัตโนมัติถ้าต้องการ\n            if (autoOpen) {\n                window.open(indexUrl, '_blank');\n            }\n            // ถ้าผู้ใช้คลิก \"รีเฟรชหน้านี้\"\n            if (result.isConfirmed) {\n                window.location.reload();\n            }\n            return true;\n        }\n    }\n    return false;\n};\n// ฟังก์ชันสำหรับการ query ที่ปลอดภัย (มีการตรวจสอบ index ก่อน)\nconst safeQuery = async function(collectionPath, conditions) {\n    let orderByFields = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [], requireIndex = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : true;\n    try {\n        // ตรวจสอบ index ก่อนถ้าต้องการ\n        if (requireIndex) {\n            const validationResult = await validateFirestoreIndex(collectionPath, conditions, orderByFields);\n            if (!validationResult.success) {\n                // ถ้าเป็น index error แสดง dialog\n                if (validationResult.isIndexError) {\n                    await handleIndexError({\n                        message: validationResult.message\n                    });\n                }\n                return {\n                    success: false,\n                    error: validationResult.message\n                };\n            }\n        }\n        // สร้าง query ตามปกติ\n        const queryObj = buildTestQuery(collectionPath, conditions, orderByFields);\n        // ดึงข้อมูลตามปกติ\n        const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(queryObj);\n        // แปลงข้อมูลและส่งกลับ\n        const results = [];\n        querySnapshot.forEach((doc)=>{\n            results.push({\n                id: doc.id,\n                ...doc.data()\n            });\n        });\n        return {\n            success: true,\n            data: results\n        };\n    } catch (error) {\n        console.error('Safe Query Error:', error);\n        // จัดการ index error ถ้าเกิดขึ้น\n        const isIndexError = await handleIndexError(error);\n        return {\n            success: false,\n            error: error.message,\n            isIndexError\n        };\n    }\n};\n// ฟังก์ชันสำหรับตรวจสอบและสร้าง indexes ทั้งหมดที่จำเป็นสำหรับแอพ\nconst validateRequiredIndexes = async ()=>{\n    const indexTests = [\n        // ตัวอย่าง query ที่ต้องการ index\n        {\n            collection: 'wardData',\n            conditions: [\n                {\n                    field: 'wardId',\n                    operator: '==',\n                    value: 'test'\n                },\n                {\n                    field: 'date',\n                    operator: '==',\n                    value: '2023-01-01'\n                },\n                {\n                    field: 'shift',\n                    operator: '==',\n                    value: 'เช้า'\n                }\n            ]\n        },\n        {\n            collection: 'wardDataHistory',\n            conditions: [\n                {\n                    field: 'wardId',\n                    operator: '==',\n                    value: 'test'\n                },\n                {\n                    field: 'date',\n                    operator: '==',\n                    value: '2023-01-01'\n                },\n                {\n                    field: 'shift',\n                    operator: '==',\n                    value: 'เช้า'\n                }\n            ],\n            orderBy: [\n                {\n                    field: 'timestamp',\n                    direction: 'desc'\n                }\n            ]\n        },\n        {\n            collection: 'wardDailyRecords',\n            conditions: [\n                {\n                    field: 'wardId',\n                    operator: '==',\n                    value: 'test'\n                },\n                {\n                    field: 'date',\n                    operator: '>=',\n                    value: '2023-01-01'\n                },\n                {\n                    field: 'date',\n                    operator: '<=',\n                    value: '2023-02-01'\n                }\n            ]\n        }\n    ];\n    const results = [];\n    // ทดสอบแต่ละ query\n    for (const test of indexTests){\n        try {\n            const result = await validateFirestoreIndex(test.collection, test.conditions, test.orderBy || []);\n            results.push({\n                collection: test.collection,\n                success: result.success,\n                ...result\n            });\n        } catch (error) {\n            results.push({\n                collection: test.collection,\n                success: false,\n                error: error.message\n            });\n        }\n    }\n    return results;\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/utils/firebase-index-manager.js\n"));

/***/ })

}]);