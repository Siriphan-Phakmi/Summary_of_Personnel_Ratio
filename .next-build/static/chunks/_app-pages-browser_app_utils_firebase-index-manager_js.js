"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_app_utils_firebase-index-manager_js"],{

/***/ "(app-pages-browser)/./app/utils/firebase-index-manager.js":
/*!*********************************************!*\
  !*** ./app/utils/firebase-index-manager.js ***!
  \*********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handleIndexError: () => (/* binding */ handleIndexError),\n/* harmony export */   safeQuery: () => (/* binding */ safeQuery),\n/* harmony export */   validateFirestoreIndex: () => (/* binding */ validateFirestoreIndex),\n/* harmony export */   validateRequiredIndexes: () => (/* binding */ validateRequiredIndexes)\n/* harmony export */ });\n/* harmony import */ var _lib_firebase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/firebase */ \"(app-pages-browser)/./app/lib/firebase.js\");\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! firebase/firestore */ \"(app-pages-browser)/./node_modules/firebase/firestore/dist/esm/index.esm.js\");\n/* harmony import */ var _alertService__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./alertService */ \"(app-pages-browser)/./app/utils/alertService.js\");\n/* __next_internal_client_entry_do_not_use__ validateFirestoreIndex,handleIndexError,safeQuery,validateRequiredIndexes auto */ \n\n\n/**\r\n * ฟังก์ชันสำหรับตรวจสอบและจัดการ Firebase Index Error\r\n */ // เก็บประวัติ indexes ที่ได้รับการตรวจสอบแล้ว\nconst validatedIndexes = new Set();\n// ฟังก์ชันตรวจสอบ query ว่าต้องการ index หรือไม่โดยทำการทดสอบ query ขนาดเล็ก\nconst validateFirestoreIndex = async function(collectionPath, conditions) {\n    let orderByFields = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];\n    try {\n        // สร้างรหัสเฉพาะสำหรับ query นี้\n        const queryId = generateQueryId(collectionPath, conditions, orderByFields);\n        // ถ้าเคยตรวจสอบแล้ว ไม่ต้องตรวจสอบอีก\n        if (validatedIndexes.has(queryId)) {\n            return {\n                success: true,\n                validated: true\n            };\n        }\n        // สร้าง query ขนาดเล็กสำหรับทดสอบ\n        const testQuery = buildTestQuery(collectionPath, conditions, orderByFields);\n        // ทดลองดึงข้อมูล 1 รายการเพื่อตรวจสอบว่ามี index error หรือไม่\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(testQuery);\n        // ถ้าสำเร็จ เพิ่มเข้าไปในรายการที่ตรวจสอบแล้ว\n        validatedIndexes.add(queryId);\n        return {\n            success: true,\n            validated: true\n        };\n    } catch (error) {\n        console.error('Firebase Index Validation Error:', error);\n        // ตรวจสอบว่าเป็น index error หรือไม่\n        if (error.message && error.message.includes('requires an index')) {\n            // แยก URL สำหรับสร้าง index จาก error message\n            const indexUrl = extractIndexUrl(error.message);\n            return {\n                success: false,\n                isIndexError: true,\n                message: error.message,\n                indexUrl\n            };\n        }\n        // กรณีเป็น error อื่นๆ\n        return {\n            success: false,\n            isIndexError: false,\n            message: error.message\n        };\n    }\n};\n// สร้าง Query ID เพื่อใช้เป็น key ในการเก็บประวัติ\nconst generateQueryId = (collectionPath, conditions, orderByFields)=>{\n    const conditionsStr = conditions.map((c)=>\"\".concat(c.field, \"_\").concat(c.operator, \"_\").concat(c.value)).join('|');\n    const orderByStr = orderByFields.join('|');\n    return \"\".concat(collectionPath, \"_\").concat(conditionsStr, \"_\").concat(orderByStr);\n};\n// สร้าง test query สำหรับตรวจสอบ\nconst buildTestQuery = (collectionPath, conditions, orderByFields)=>{\n    let baseQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(_lib_firebase__WEBPACK_IMPORTED_MODULE_0__.db, collectionPath), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.limit)(1));\n    // เพิ่มเงื่อนไข where\n    conditions.forEach((condition)=>{\n        baseQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(baseQuery, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(condition.field, condition.operator, condition.value));\n    });\n    // เพิ่ม orderBy ถ้ามี\n    if (orderByFields.length > 0) {\n        const { orderBy } = __webpack_require__(/*! firebase/firestore */ \"(app-pages-browser)/./node_modules/firebase/firestore/dist/index.cjs.js\");\n        orderByFields.forEach((field)=>{\n            if (typeof field === 'object') {\n                baseQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(baseQuery, orderBy(field.field, field.direction));\n            } else {\n                baseQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(baseQuery, orderBy(field));\n            }\n        });\n    }\n    return baseQuery;\n};\n// แยก URL สำหรับสร้าง index จาก error message\nconst extractIndexUrl = (errorMessage)=>{\n    const urlMatch = errorMessage.match(/(https:\\/\\/console\\.firebase\\.google\\.com\\S+)/);\n    return urlMatch && urlMatch[1] ? urlMatch[1] : null;\n};\n// ฟังก์ชันช่วยแสดง dialog เมื่อพบ index error\nconst handleIndexError = async function(error) {\n    let autoOpen = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n    // ตรวจสอบว่าเป็น index error หรือไม่\n    if (error.message && error.message.includes('requires an index')) {\n        const indexUrl = extractIndexUrl(error.message);\n        if (indexUrl) {\n            // แสดง dialog พร้อมลิงก์ไปยังหน้าสร้าง index\n            const result = await _alertService__WEBPACK_IMPORTED_MODULE_2__.Swal.fire({\n                title: 'ต้องสร้าง Index ใน Firebase',\n                html: '\\n          <p>การค้นหาข้อมูลนี้ต้องการ index เพิ่มเติม</p>\\n          <p>คลิกปุ่ม \"สร้าง Index\" เพื่อสร้าง index ใน Firebase Console</p>\\n          <p>หลังจากสร้างแล้ว ให้กลับมารีเฟรชหน้านี้</p>\\n          <div class=\"mt-4\">\\n            <a href=\"'.concat(indexUrl, '\" target=\"_blank\" rel=\"noopener noreferrer\" \\n               class=\"px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600\">\\n              สร้าง Index\\n            </a>\\n          </div>\\n        '),\n                icon: 'warning',\n                showCancelButton: true,\n                confirmButtonText: 'รีเฟรชหน้านี้',\n                cancelButtonText: 'ยกเลิก',\n                confirmButtonColor: '#0ab4ab'\n            });\n            // เปิด URL ในแท็บใหม่โดยอัตโนมัติถ้าต้องการ\n            if (autoOpen) {\n                window.open(indexUrl, '_blank');\n            }\n            // ถ้าผู้ใช้คลิก \"รีเฟรชหน้านี้\"\n            if (result.isConfirmed) {\n                window.location.reload();\n            }\n            return true;\n        }\n    }\n    return false;\n};\n// ฟังก์ชันสำหรับการ query ที่ปลอดภัย (มีการตรวจสอบ index ก่อน)\nconst safeQuery = async function(collectionPath, conditions) {\n    let orderByFields = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [], requireIndex = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : true;\n    try {\n        // ตรวจสอบ index ก่อนถ้าต้องการ\n        if (requireIndex) {\n            const validationResult = await validateFirestoreIndex(collectionPath, conditions, orderByFields);\n            if (!validationResult.success) {\n                // ถ้าเป็น index error แสดง dialog\n                if (validationResult.isIndexError) {\n                    await handleIndexError({\n                        message: validationResult.message\n                    });\n                }\n                return {\n                    success: false,\n                    error: validationResult.message\n                };\n            }\n        }\n        // สร้าง query ตามปกติ\n        const queryObj = buildTestQuery(collectionPath, conditions, orderByFields);\n        // ดึงข้อมูลตามปกติ\n        const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(queryObj);\n        // แปลงข้อมูลและส่งกลับ\n        const results = [];\n        querySnapshot.forEach((doc)=>{\n            results.push({\n                id: doc.id,\n                ...doc.data()\n            });\n        });\n        return {\n            success: true,\n            data: results\n        };\n    } catch (error) {\n        console.error('Safe Query Error:', error);\n        // จัดการ index error ถ้าเกิดขึ้น\n        const isIndexError = await handleIndexError(error);\n        return {\n            success: false,\n            error: error.message,\n            isIndexError\n        };\n    }\n};\n// ฟังก์ชันสำหรับตรวจสอบและสร้าง indexes ทั้งหมดที่จำเป็นสำหรับแอพ\nconst validateRequiredIndexes = async ()=>{\n    const indexTests = [\n        // ตัวอย่าง query ที่ต้องการ index\n        {\n            collection: 'wardData',\n            conditions: [\n                {\n                    field: 'wardId',\n                    operator: '==',\n                    value: 'test'\n                },\n                {\n                    field: 'date',\n                    operator: '==',\n                    value: '2023-01-01'\n                },\n                {\n                    field: 'shift',\n                    operator: '==',\n                    value: 'เช้า'\n                }\n            ]\n        },\n        {\n            collection: 'wardDataHistory',\n            conditions: [\n                {\n                    field: 'wardId',\n                    operator: '==',\n                    value: 'test'\n                },\n                {\n                    field: 'date',\n                    operator: '==',\n                    value: '2023-01-01'\n                },\n                {\n                    field: 'shift',\n                    operator: '==',\n                    value: 'เช้า'\n                }\n            ],\n            orderBy: [\n                {\n                    field: 'timestamp',\n                    direction: 'desc'\n                }\n            ]\n        },\n        {\n            collection: 'wardDailyRecords',\n            conditions: [\n                {\n                    field: 'wardId',\n                    operator: '==',\n                    value: 'test'\n                },\n                {\n                    field: 'date',\n                    operator: '>=',\n                    value: '2023-01-01'\n                },\n                {\n                    field: 'date',\n                    operator: '<=',\n                    value: '2023-02-01'\n                }\n            ]\n        }\n    ];\n    const results = [];\n    // ทดสอบแต่ละ query\n    for (const test of indexTests){\n        try {\n            const result = await validateFirestoreIndex(test.collection, test.conditions, test.orderBy || []);\n            results.push({\n                collection: test.collection,\n                success: result.success,\n                ...result\n            });\n        } catch (error) {\n            results.push({\n                collection: test.collection,\n                success: false,\n                error: error.message\n            });\n        }\n    }\n    return results;\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC91dGlscy9maXJlYmFzZS1pbmRleC1tYW5hZ2VyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7K0hBRXFDO0FBQ3lDO0FBQ3hDO0FBRXRDOztDQUVDLEdBRUQsOENBQThDO0FBQzlDLE1BQU1PLG1CQUFtQixJQUFJQztBQUU3Qiw2RUFBNkU7QUFDdEUsTUFBTUMseUJBQXlCLGVBQU9DLGdCQUFnQkM7UUFBWUMsaUZBQWdCLEVBQUU7SUFDekYsSUFBSTtRQUNGLGlDQUFpQztRQUNqQyxNQUFNQyxVQUFVQyxnQkFBZ0JKLGdCQUFnQkMsWUFBWUM7UUFFNUQsc0NBQXNDO1FBQ3RDLElBQUlMLGlCQUFpQlEsR0FBRyxDQUFDRixVQUFVO1lBQ2pDLE9BQU87Z0JBQUVHLFNBQVM7Z0JBQU1DLFdBQVc7WUFBSztRQUMxQztRQUVBLGtDQUFrQztRQUNsQyxNQUFNQyxZQUFZQyxlQUFlVCxnQkFBZ0JDLFlBQVlDO1FBRTdELCtEQUErRDtRQUMvRCxNQUFNVCwyREFBT0EsQ0FBQ2U7UUFFZCw4Q0FBOEM7UUFDOUNYLGlCQUFpQmEsR0FBRyxDQUFDUDtRQUVyQixPQUFPO1lBQUVHLFNBQVM7WUFBTUMsV0FBVztRQUFLO0lBQzFDLEVBQUUsT0FBT0ksT0FBTztRQUNkQyxRQUFRRCxLQUFLLENBQUMsb0NBQW9DQTtRQUVsRCxxQ0FBcUM7UUFDckMsSUFBSUEsTUFBTUUsT0FBTyxJQUFJRixNQUFNRSxPQUFPLENBQUNDLFFBQVEsQ0FBQyxzQkFBc0I7WUFDaEUsOENBQThDO1lBQzlDLE1BQU1DLFdBQVdDLGdCQUFnQkwsTUFBTUUsT0FBTztZQUU5QyxPQUFPO2dCQUNMUCxTQUFTO2dCQUNUVyxjQUFjO2dCQUNkSixTQUFTRixNQUFNRSxPQUFPO2dCQUN0QkU7WUFDRjtRQUNGO1FBRUEsdUJBQXVCO1FBQ3ZCLE9BQU87WUFDTFQsU0FBUztZQUNUVyxjQUFjO1lBQ2RKLFNBQVNGLE1BQU1FLE9BQU87UUFDeEI7SUFDRjtBQUNGLEVBQUU7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O29CQUFFb0IsT0FBTztvQkFBVUMsVUFBVTtvQkFBTUMsT0FBTztnQkFBTztnQkFDakQ7b0JBQUVGLE9BQU87b0JBQVFDLFVBQVU7b0JBQU1DLE9BQU87Z0JBQWE7Z0JBQ3JEO29CQUFFRixPQUFPO29CQUFTQyxVQUFVO29CQUFNQyxPQUFPO2dCQUFPO2FBQ2pEO1lBQ0RPLFNBQVM7Z0JBQUM7b0JBQUVULE9BQU87b0JBQWFXLFdBQVc7Z0JBQU87YUFBRTtRQUN0RDtRQUNBO1lBQ0V4QyxZQUFZO1lBQ1pTLFlBQVk7Z0JBQ1Y7b0JBQUVvQixPQUFPO29CQUFVQyxVQUFVO29CQUFNQyxPQUFPO2dCQUFPO2dCQUNqRDtvQkFBRUYsT0FBTztvQkFBUUMsVUFBVTtvQkFBTUMsT0FBTztnQkFBYTtnQkFDckQ7b0JBQUVGLE9BQU87b0JBQVFDLFVBQVU7b0JBQU1DLE9BQU87Z0JBQWE7YUFDdEQ7UUFDSDtLQUVEO0lBRUQsTUFBTWtDLFVBQVUsRUFBRTtJQUVsQixtQkFBbUI7SUFDbkIsS0FBSyxNQUFNTyxRQUFRRCxXQUFZO1FBQzdCLElBQUk7WUFDRixNQUFNekIsU0FBUyxNQUFNdkMsdUJBQ25CaUUsS0FBS3hFLFVBQVUsRUFDZndFLEtBQUsvRCxVQUFVLEVBQ2YrRCxLQUFLbEMsT0FBTyxJQUFJLEVBQUU7WUFHcEIyQixRQUFRRSxJQUFJLENBQUM7Z0JBQ1huRSxZQUFZd0UsS0FBS3hFLFVBQVU7Z0JBQzNCYyxTQUFTZ0MsT0FBT2hDLE9BQU87Z0JBQ3ZCLEdBQUdnQyxNQUFNO1lBQ1g7UUFDRixFQUFFLE9BQU8zQixPQUFPO1lBQ2Q4QyxRQUFRRSxJQUFJLENBQUM7Z0JBQ1huRSxZQUFZd0UsS0FBS3hFLFVBQVU7Z0JBQzNCYyxTQUFTO2dCQUNUSyxPQUFPQSxNQUFNRSxPQUFPO1lBQ3RCO1FBQ0Y7SUFDRjtJQUVBLE9BQU80QztBQUNULEVBQUUiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQl9TSVJcXE9uZURyaXZlXFzguYDguJTguKrguIHguYzguJfguYfguK3guJtcXFN1bW1hcnlfb2ZfUGVyc29ubmVsX1JhdGlvXFxTdW1tYXJ5X29mX1BlcnNvbm5lbF9SYXRpb1xcYXBwXFx1dGlsc1xcZmlyZWJhc2UtaW5kZXgtbWFuYWdlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGNsaWVudCc7XHJcblxyXG5pbXBvcnQgeyBkYiB9IGZyb20gJy4uL2xpYi9maXJlYmFzZSc7XHJcbmltcG9ydCB7IHF1ZXJ5LCBjb2xsZWN0aW9uLCBnZXREb2NzLCB3aGVyZSwgbGltaXQgfSBmcm9tICdmaXJlYmFzZS9maXJlc3RvcmUnO1xyXG5pbXBvcnQgeyBTd2FsIH0gZnJvbSAnLi9hbGVydFNlcnZpY2UnO1xyXG5cclxuLyoqXHJcbiAqIOC4n+C4seC4h+C4geC5jOC4iuC4seC4meC4quC4s+C4q+C4o+C4seC4muC4leC4o+C4p+C4iOC4quC4reC4muC5geC4peC4sOC4iOC4seC4lOC4geC4suC4oyBGaXJlYmFzZSBJbmRleCBFcnJvclxyXG4gKi9cclxuXHJcbi8vIOC5gOC4geC5h+C4muC4m+C4o+C4sOC4p+C4seC4leC4tCBpbmRleGVzIOC4l+C4teC5iOC5hOC4lOC5ieC4o+C4seC4muC4geC4suC4o+C4leC4o+C4p+C4iOC4quC4reC4muC5geC4peC5ieC4p1xyXG5jb25zdCB2YWxpZGF0ZWRJbmRleGVzID0gbmV3IFNldCgpO1xyXG5cclxuLy8g4Lif4Lix4LiH4LiB4LmM4LiK4Lix4LiZ4LiV4Lij4Lin4LiI4Liq4Lit4LiaIHF1ZXJ5IOC4p+C5iOC4suC4leC5ieC4reC4h+C4geC4suC4oyBpbmRleCDguKvguKPguLfguK3guYTguKHguYjguYLguJTguKLguJfguLPguIHguLLguKPguJfguJTguKrguK3guJogcXVlcnkg4LiC4LiZ4Liy4LiU4LmA4Lil4LmH4LiBXHJcbmV4cG9ydCBjb25zdCB2YWxpZGF0ZUZpcmVzdG9yZUluZGV4ID0gYXN5bmMgKGNvbGxlY3Rpb25QYXRoLCBjb25kaXRpb25zLCBvcmRlckJ5RmllbGRzID0gW10pID0+IHtcclxuICB0cnkge1xyXG4gICAgLy8g4Liq4Lij4LmJ4Liy4LiH4Lij4Lir4Lix4Liq4LmA4LiJ4Lie4Liy4Liw4Liq4Liz4Lir4Lij4Lix4LiaIHF1ZXJ5IOC4meC4teC5iVxyXG4gICAgY29uc3QgcXVlcnlJZCA9IGdlbmVyYXRlUXVlcnlJZChjb2xsZWN0aW9uUGF0aCwgY29uZGl0aW9ucywgb3JkZXJCeUZpZWxkcyk7XHJcbiAgICBcclxuICAgIC8vIOC4luC5ieC4suC5gOC4hOC4ouC4leC4o+C4p+C4iOC4quC4reC4muC5geC4peC5ieC4pyDguYTguKHguYjguJXguYnguK3guIfguJXguKPguKfguIjguKrguK3guJrguK3guLXguIFcclxuICAgIGlmICh2YWxpZGF0ZWRJbmRleGVzLmhhcyhxdWVyeUlkKSkge1xyXG4gICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlLCB2YWxpZGF0ZWQ6IHRydWUgfTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8g4Liq4Lij4LmJ4Liy4LiHIHF1ZXJ5IOC4guC4meC4suC4lOC5gOC4peC5h+C4geC4quC4s+C4q+C4o+C4seC4muC4l+C4lOC4quC4reC4mlxyXG4gICAgY29uc3QgdGVzdFF1ZXJ5ID0gYnVpbGRUZXN0UXVlcnkoY29sbGVjdGlvblBhdGgsIGNvbmRpdGlvbnMsIG9yZGVyQnlGaWVsZHMpO1xyXG4gICAgXHJcbiAgICAvLyDguJfguJTguKXguK3guIfguJTguLbguIfguILguYnguK3guKHguLnguKUgMSDguKPguLLguKLguIHguLLguKPguYDguJ7guLfguYjguK3guJXguKPguKfguIjguKrguK3guJrguKfguYjguLLguKHguLUgaW5kZXggZXJyb3Ig4Lir4Lij4Li34Lit4LmE4Lih4LmIXHJcbiAgICBhd2FpdCBnZXREb2NzKHRlc3RRdWVyeSk7XHJcbiAgICBcclxuICAgIC8vIOC4luC5ieC4suC4quC4s+C5gOC4o+C5h+C4iCDguYDguJ7guLTguYjguKHguYDguILguYnguLLguYTguJvguYPguJnguKPguLLguKLguIHguLLguKPguJfguLXguYjguJXguKPguKfguIjguKrguK3guJrguYHguKXguYnguKdcclxuICAgIHZhbGlkYXRlZEluZGV4ZXMuYWRkKHF1ZXJ5SWQpO1xyXG4gICAgXHJcbiAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlLCB2YWxpZGF0ZWQ6IHRydWUgfTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRmlyZWJhc2UgSW5kZXggVmFsaWRhdGlvbiBFcnJvcjonLCBlcnJvcik7XHJcbiAgICBcclxuICAgIC8vIOC4leC4o+C4p+C4iOC4quC4reC4muC4p+C5iOC4suC5gOC4m+C5h+C4mSBpbmRleCBlcnJvciDguKvguKPguLfguK3guYTguKHguYhcclxuICAgIGlmIChlcnJvci5tZXNzYWdlICYmIGVycm9yLm1lc3NhZ2UuaW5jbHVkZXMoJ3JlcXVpcmVzIGFuIGluZGV4JykpIHtcclxuICAgICAgLy8g4LmB4Lii4LiBIFVSTCDguKrguLPguKvguKPguLHguJrguKrguKPguYnguLLguIcgaW5kZXgg4LiI4Liy4LiBIGVycm9yIG1lc3NhZ2VcclxuICAgICAgY29uc3QgaW5kZXhVcmwgPSBleHRyYWN0SW5kZXhVcmwoZXJyb3IubWVzc2FnZSk7XHJcbiAgICAgIFxyXG4gICAgICByZXR1cm4geyBcclxuICAgICAgICBzdWNjZXNzOiBmYWxzZSwgXHJcbiAgICAgICAgaXNJbmRleEVycm9yOiB0cnVlLCBcclxuICAgICAgICBtZXNzYWdlOiBlcnJvci5tZXNzYWdlLFxyXG4gICAgICAgIGluZGV4VXJsIFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyDguIHguKPguJPguLXguYDguJvguYfguJkgZXJyb3Ig4Lit4Li34LmI4LiZ4LmGXHJcbiAgICByZXR1cm4geyBcclxuICAgICAgc3VjY2VzczogZmFsc2UsIFxyXG4gICAgICBpc0luZGV4RXJyb3I6IGZhbHNlLCBcclxuICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZSBcclxuICAgIH07XHJcbiAgfVxyXG59O1xyXG5cclxuLy8g4Liq4Lij4LmJ4Liy4LiHIFF1ZXJ5IElEIOC5gOC4nuC4t+C5iOC4reC5g+C4iuC5ieC5gOC4m+C5h+C4mSBrZXkg4LmD4LiZ4LiB4Liy4Lij4LmA4LiB4LmH4Lia4Lib4Lij4Liw4Lin4Lix4LiV4Li0XHJcbmNvbnN0IGdlbmVyYXRlUXVlcnlJZCA9IChjb2xsZWN0aW9uUGF0aCwgY29uZGl0aW9ucywgb3JkZXJCeUZpZWxkcykgPT4ge1xyXG4gIGNvbnN0IGNvbmRpdGlvbnNTdHIgPSBjb25kaXRpb25zLm1hcChjID0+IGAke2MuZmllbGR9XyR7Yy5vcGVyYXRvcn1fJHtjLnZhbHVlfWApLmpvaW4oJ3wnKTtcclxuICBjb25zdCBvcmRlckJ5U3RyID0gb3JkZXJCeUZpZWxkcy5qb2luKCd8Jyk7XHJcbiAgcmV0dXJuIGAke2NvbGxlY3Rpb25QYXRofV8ke2NvbmRpdGlvbnNTdHJ9XyR7b3JkZXJCeVN0cn1gO1xyXG59O1xyXG5cclxuLy8g4Liq4Lij4LmJ4Liy4LiHIHRlc3QgcXVlcnkg4Liq4Liz4Lir4Lij4Lix4Lia4LiV4Lij4Lin4LiI4Liq4Lit4LiaXHJcbmNvbnN0IGJ1aWxkVGVzdFF1ZXJ5ID0gKGNvbGxlY3Rpb25QYXRoLCBjb25kaXRpb25zLCBvcmRlckJ5RmllbGRzKSA9PiB7XHJcbiAgbGV0IGJhc2VRdWVyeSA9IHF1ZXJ5KFxyXG4gICAgY29sbGVjdGlvbihkYiwgY29sbGVjdGlvblBhdGgpLFxyXG4gICAgbGltaXQoMSlcclxuICApO1xyXG4gIFxyXG4gIC8vIOC5gOC4nuC4tOC5iOC4oeC5gOC4h+C4t+C5iOC4reC4meC5hOC4giB3aGVyZVxyXG4gIGNvbmRpdGlvbnMuZm9yRWFjaChjb25kaXRpb24gPT4ge1xyXG4gICAgYmFzZVF1ZXJ5ID0gcXVlcnkoXHJcbiAgICAgIGJhc2VRdWVyeSxcclxuICAgICAgd2hlcmUoY29uZGl0aW9uLmZpZWxkLCBjb25kaXRpb24ub3BlcmF0b3IsIGNvbmRpdGlvbi52YWx1ZSlcclxuICAgICk7XHJcbiAgfSk7XHJcbiAgXHJcbiAgLy8g4LmA4Lie4Li04LmI4LihIG9yZGVyQnkg4LiW4LmJ4Liy4Lih4Li1XHJcbiAgaWYgKG9yZGVyQnlGaWVsZHMubGVuZ3RoID4gMCkge1xyXG4gICAgY29uc3QgeyBvcmRlckJ5IH0gPSByZXF1aXJlKCdmaXJlYmFzZS9maXJlc3RvcmUnKTtcclxuICAgIG9yZGVyQnlGaWVsZHMuZm9yRWFjaChmaWVsZCA9PiB7XHJcbiAgICAgIGlmICh0eXBlb2YgZmllbGQgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgYmFzZVF1ZXJ5ID0gcXVlcnkoYmFzZVF1ZXJ5LCBvcmRlckJ5KGZpZWxkLmZpZWxkLCBmaWVsZC5kaXJlY3Rpb24pKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBiYXNlUXVlcnkgPSBxdWVyeShiYXNlUXVlcnksIG9yZGVyQnkoZmllbGQpKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG4gIFxyXG4gIHJldHVybiBiYXNlUXVlcnk7XHJcbn07XHJcblxyXG4vLyDguYHguKLguIEgVVJMIOC4quC4s+C4q+C4o+C4seC4muC4quC4o+C5ieC4suC4hyBpbmRleCDguIjguLLguIEgZXJyb3IgbWVzc2FnZVxyXG5jb25zdCBleHRyYWN0SW5kZXhVcmwgPSAoZXJyb3JNZXNzYWdlKSA9PiB7XHJcbiAgY29uc3QgdXJsTWF0Y2ggPSBlcnJvck1lc3NhZ2UubWF0Y2goLyhodHRwczpcXC9cXC9jb25zb2xlXFwuZmlyZWJhc2VcXC5nb29nbGVcXC5jb21cXFMrKS8pO1xyXG4gIHJldHVybiB1cmxNYXRjaCAmJiB1cmxNYXRjaFsxXSA/IHVybE1hdGNoWzFdIDogbnVsbDtcclxufTtcclxuXHJcbi8vIOC4n+C4seC4h+C4geC5jOC4iuC4seC4meC4iuC5iOC4p+C4ouC5geC4quC4lOC4hyBkaWFsb2cg4LmA4Lih4Li34LmI4Lit4Lie4LiaIGluZGV4IGVycm9yXHJcbmV4cG9ydCBjb25zdCBoYW5kbGVJbmRleEVycm9yID0gYXN5bmMgKGVycm9yLCBhdXRvT3BlbiA9IGZhbHNlKSA9PiB7XHJcbiAgLy8g4LiV4Lij4Lin4LiI4Liq4Lit4Lia4Lin4LmI4Liy4LmA4Lib4LmH4LiZIGluZGV4IGVycm9yIOC4q+C4o+C4t+C4reC5hOC4oeC5iFxyXG4gIGlmIChlcnJvci5tZXNzYWdlICYmIGVycm9yLm1lc3NhZ2UuaW5jbHVkZXMoJ3JlcXVpcmVzIGFuIGluZGV4JykpIHtcclxuICAgIGNvbnN0IGluZGV4VXJsID0gZXh0cmFjdEluZGV4VXJsKGVycm9yLm1lc3NhZ2UpO1xyXG4gICAgXHJcbiAgICBpZiAoaW5kZXhVcmwpIHtcclxuICAgICAgLy8g4LmB4Liq4LiU4LiHIGRpYWxvZyDguJ7guKPguYnguK3guKHguKXguLTguIfguIHguYzguYTguJvguKLguLHguIfguKvguJnguYnguLLguKrguKPguYnguLLguIcgaW5kZXhcclxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgU3dhbC5maXJlKHtcclxuICAgICAgICB0aXRsZTogJ+C4leC5ieC4reC4h+C4quC4o+C5ieC4suC4hyBJbmRleCDguYPguJkgRmlyZWJhc2UnLFxyXG4gICAgICAgIGh0bWw6IGBcclxuICAgICAgICAgIDxwPuC4geC4suC4o+C4hOC5ieC4meC4q+C4suC4guC5ieC4reC4oeC4ueC4peC4meC4teC5ieC4leC5ieC4reC4h+C4geC4suC4oyBpbmRleCDguYDguJ7guLTguYjguKHguYDguJXguLTguKE8L3A+XHJcbiAgICAgICAgICA8cD7guITguKXguLTguIHguJvguLjguYjguKEgXCLguKrguKPguYnguLLguIcgSW5kZXhcIiDguYDguJ7guLfguYjguK3guKrguKPguYnguLLguIcgaW5kZXgg4LmD4LiZIEZpcmViYXNlIENvbnNvbGU8L3A+XHJcbiAgICAgICAgICA8cD7guKvguKXguLHguIfguIjguLLguIHguKrguKPguYnguLLguIfguYHguKXguYnguKcg4LmD4Lir4LmJ4LiB4Lil4Lix4Lia4Lih4Liy4Lij4Li14LmA4Lif4Lij4LiK4Lir4LiZ4LmJ4Liy4LiZ4Li14LmJPC9wPlxyXG4gICAgICAgICAgPGRpdiBjbGFzcz1cIm10LTRcIj5cclxuICAgICAgICAgICAgPGEgaHJlZj1cIiR7aW5kZXhVcmx9XCIgdGFyZ2V0PVwiX2JsYW5rXCIgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiIFxyXG4gICAgICAgICAgICAgICBjbGFzcz1cInB4LTQgcHktMiBiZy1ibHVlLTUwMCB0ZXh0LXdoaXRlIHJvdW5kZWQtbWQgaG92ZXI6YmctYmx1ZS02MDBcIj5cclxuICAgICAgICAgICAgICDguKrguKPguYnguLLguIcgSW5kZXhcclxuICAgICAgICAgICAgPC9hPlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgYCxcclxuICAgICAgICBpY29uOiAnd2FybmluZycsXHJcbiAgICAgICAgc2hvd0NhbmNlbEJ1dHRvbjogdHJ1ZSxcclxuICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogJ+C4o+C4teC5gOC4n+C4o+C4iuC4q+C4meC5ieC4suC4meC4teC5iScsXHJcbiAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDogJ+C4ouC4geC5gOC4peC4tOC4gScsXHJcbiAgICAgICAgY29uZmlybUJ1dHRvbkNvbG9yOiAnIzBhYjRhYidcclxuICAgICAgfSk7XHJcbiAgICAgIFxyXG4gICAgICAvLyDguYDguJvguLTguJQgVVJMIOC5g+C4meC5geC4l+C5h+C4muC5g+C4q+C4oeC5iOC5guC4lOC4ouC4reC4seC4leC5guC4meC4oeC4seC4leC4tOC4luC5ieC4suC4leC5ieC4reC4h+C4geC4suC4o1xyXG4gICAgICBpZiAoYXV0b09wZW4pIHtcclxuICAgICAgICB3aW5kb3cub3BlbihpbmRleFVybCwgJ19ibGFuaycpO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICAvLyDguJbguYnguLLguJzguLnguYnguYPguIrguYnguITguKXguLTguIEgXCLguKPguLXguYDguJ/guKPguIrguKvguJnguYnguLLguJnguLXguYlcIlxyXG4gICAgICBpZiAocmVzdWx0LmlzQ29uZmlybWVkKSB7XHJcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgcmV0dXJuIGZhbHNlO1xyXG59O1xyXG5cclxuLy8g4Lif4Lix4LiH4LiB4LmM4LiK4Lix4LiZ4Liq4Liz4Lir4Lij4Lix4Lia4LiB4Liy4LijIHF1ZXJ5IOC4l+C4teC5iOC4m+C4peC4reC4lOC4oOC4seC4oiAo4Lih4Li14LiB4Liy4Lij4LiV4Lij4Lin4LiI4Liq4Lit4LiaIGluZGV4IOC4geC5iOC4reC4mSlcclxuZXhwb3J0IGNvbnN0IHNhZmVRdWVyeSA9IGFzeW5jIChjb2xsZWN0aW9uUGF0aCwgY29uZGl0aW9ucywgb3JkZXJCeUZpZWxkcyA9IFtdLCByZXF1aXJlSW5kZXggPSB0cnVlKSA9PiB7XHJcbiAgdHJ5IHtcclxuICAgIC8vIOC4leC4o+C4p+C4iOC4quC4reC4miBpbmRleCDguIHguYjguK3guJnguJbguYnguLLguJXguYnguK3guIfguIHguLLguKNcclxuICAgIGlmIChyZXF1aXJlSW5kZXgpIHtcclxuICAgICAgY29uc3QgdmFsaWRhdGlvblJlc3VsdCA9IGF3YWl0IHZhbGlkYXRlRmlyZXN0b3JlSW5kZXgoY29sbGVjdGlvblBhdGgsIGNvbmRpdGlvbnMsIG9yZGVyQnlGaWVsZHMpO1xyXG4gICAgICBcclxuICAgICAgaWYgKCF2YWxpZGF0aW9uUmVzdWx0LnN1Y2Nlc3MpIHtcclxuICAgICAgICAvLyDguJbguYnguLLguYDguJvguYfguJkgaW5kZXggZXJyb3Ig4LmB4Liq4LiU4LiHIGRpYWxvZ1xyXG4gICAgICAgIGlmICh2YWxpZGF0aW9uUmVzdWx0LmlzSW5kZXhFcnJvcikge1xyXG4gICAgICAgICAgYXdhaXQgaGFuZGxlSW5kZXhFcnJvcih7IG1lc3NhZ2U6IHZhbGlkYXRpb25SZXN1bHQubWVzc2FnZSB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIGVycm9yOiB2YWxpZGF0aW9uUmVzdWx0Lm1lc3NhZ2UgfTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyDguKrguKPguYnguLLguIcgcXVlcnkg4LiV4Liy4Lih4Lib4LiB4LiV4Li0XHJcbiAgICBjb25zdCBxdWVyeU9iaiA9IGJ1aWxkVGVzdFF1ZXJ5KGNvbGxlY3Rpb25QYXRoLCBjb25kaXRpb25zLCBvcmRlckJ5RmllbGRzKTtcclxuICAgIFxyXG4gICAgLy8g4LiU4Li24LiH4LiC4LmJ4Lit4Lih4Li54Lil4LiV4Liy4Lih4Lib4LiB4LiV4Li0XHJcbiAgICBjb25zdCBxdWVyeVNuYXBzaG90ID0gYXdhaXQgZ2V0RG9jcyhxdWVyeU9iaik7XHJcbiAgICBcclxuICAgIC8vIOC5geC4m+C4peC4h+C4guC5ieC4reC4oeC4ueC4peC5geC4peC4sOC4quC5iOC4h+C4geC4peC4seC4mlxyXG4gICAgY29uc3QgcmVzdWx0cyA9IFtdO1xyXG4gICAgcXVlcnlTbmFwc2hvdC5mb3JFYWNoKGRvYyA9PiB7XHJcbiAgICAgIHJlc3VsdHMucHVzaCh7XHJcbiAgICAgICAgaWQ6IGRvYy5pZCxcclxuICAgICAgICAuLi5kb2MuZGF0YSgpXHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUsIGRhdGE6IHJlc3VsdHMgfTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignU2FmZSBRdWVyeSBFcnJvcjonLCBlcnJvcik7XHJcbiAgICBcclxuICAgIC8vIOC4iOC4seC4lOC4geC4suC4oyBpbmRleCBlcnJvciDguJbguYnguLLguYDguIHguLTguJTguILguLbguYnguJlcclxuICAgIGNvbnN0IGlzSW5kZXhFcnJvciA9IGF3YWl0IGhhbmRsZUluZGV4RXJyb3IoZXJyb3IpO1xyXG4gICAgXHJcbiAgICByZXR1cm4geyBcclxuICAgICAgc3VjY2VzczogZmFsc2UsIFxyXG4gICAgICBlcnJvcjogZXJyb3IubWVzc2FnZSxcclxuICAgICAgaXNJbmRleEVycm9yIFxyXG4gICAgfTtcclxuICB9XHJcbn07XHJcblxyXG4vLyDguJ/guLHguIfguIHguYzguIrguLHguJnguKrguLPguKvguKPguLHguJrguJXguKPguKfguIjguKrguK3guJrguYHguKXguLDguKrguKPguYnguLLguIcgaW5kZXhlcyDguJfguLHguYnguIfguKvguKHguJTguJfguLXguYjguIjguLPguYDguJvguYfguJnguKrguLPguKvguKPguLHguJrguYHguK3guJ5cclxuZXhwb3J0IGNvbnN0IHZhbGlkYXRlUmVxdWlyZWRJbmRleGVzID0gYXN5bmMgKCkgPT4ge1xyXG4gIGNvbnN0IGluZGV4VGVzdHMgPSBbXHJcbiAgICAvLyDguJXguLHguKfguK3guKLguYjguLLguIcgcXVlcnkg4LiX4Li14LmI4LiV4LmJ4Lit4LiH4LiB4Liy4LijIGluZGV4XHJcbiAgICB7XHJcbiAgICAgIGNvbGxlY3Rpb246ICd3YXJkRGF0YScsXHJcbiAgICAgIGNvbmRpdGlvbnM6IFtcclxuICAgICAgICB7IGZpZWxkOiAnd2FyZElkJywgb3BlcmF0b3I6ICc9PScsIHZhbHVlOiAndGVzdCcgfSxcclxuICAgICAgICB7IGZpZWxkOiAnZGF0ZScsIG9wZXJhdG9yOiAnPT0nLCB2YWx1ZTogJzIwMjMtMDEtMDEnIH0sXHJcbiAgICAgICAgeyBmaWVsZDogJ3NoaWZ0Jywgb3BlcmF0b3I6ICc9PScsIHZhbHVlOiAn4LmA4LiK4LmJ4LiyJyB9XHJcbiAgICAgIF1cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGNvbGxlY3Rpb246ICd3YXJkRGF0YUhpc3RvcnknLFxyXG4gICAgICBjb25kaXRpb25zOiBbXHJcbiAgICAgICAgeyBmaWVsZDogJ3dhcmRJZCcsIG9wZXJhdG9yOiAnPT0nLCB2YWx1ZTogJ3Rlc3QnIH0sXHJcbiAgICAgICAgeyBmaWVsZDogJ2RhdGUnLCBvcGVyYXRvcjogJz09JywgdmFsdWU6ICcyMDIzLTAxLTAxJyB9LFxyXG4gICAgICAgIHsgZmllbGQ6ICdzaGlmdCcsIG9wZXJhdG9yOiAnPT0nLCB2YWx1ZTogJ+C5gOC4iuC5ieC4sicgfVxyXG4gICAgICBdLFxyXG4gICAgICBvcmRlckJ5OiBbeyBmaWVsZDogJ3RpbWVzdGFtcCcsIGRpcmVjdGlvbjogJ2Rlc2MnIH1dXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBjb2xsZWN0aW9uOiAnd2FyZERhaWx5UmVjb3JkcycsXHJcbiAgICAgIGNvbmRpdGlvbnM6IFtcclxuICAgICAgICB7IGZpZWxkOiAnd2FyZElkJywgb3BlcmF0b3I6ICc9PScsIHZhbHVlOiAndGVzdCcgfSxcclxuICAgICAgICB7IGZpZWxkOiAnZGF0ZScsIG9wZXJhdG9yOiAnPj0nLCB2YWx1ZTogJzIwMjMtMDEtMDEnIH0sXHJcbiAgICAgICAgeyBmaWVsZDogJ2RhdGUnLCBvcGVyYXRvcjogJzw9JywgdmFsdWU6ICcyMDIzLTAyLTAxJyB9XHJcbiAgICAgIF1cclxuICAgIH1cclxuICAgIC8vIOC5gOC4nuC4tOC5iOC4oSBxdWVyeSDguJfguLXguYjguJXguYnguK3guIfguIHguLLguKMgaW5kZXgg4Lit4Li34LmI4LiZ4LmGIOC4leC4suC4oeC4leC5ieC4reC4h+C4geC4suC4o1xyXG4gIF07XHJcbiAgXHJcbiAgY29uc3QgcmVzdWx0cyA9IFtdO1xyXG4gIFxyXG4gIC8vIOC4l+C4lOC4quC4reC4muC5geC4leC5iOC4peC4sCBxdWVyeVxyXG4gIGZvciAoY29uc3QgdGVzdCBvZiBpbmRleFRlc3RzKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB2YWxpZGF0ZUZpcmVzdG9yZUluZGV4KFxyXG4gICAgICAgIHRlc3QuY29sbGVjdGlvbiwgXHJcbiAgICAgICAgdGVzdC5jb25kaXRpb25zLCBcclxuICAgICAgICB0ZXN0Lm9yZGVyQnkgfHwgW11cclxuICAgICAgKTtcclxuICAgICAgXHJcbiAgICAgIHJlc3VsdHMucHVzaCh7XHJcbiAgICAgICAgY29sbGVjdGlvbjogdGVzdC5jb2xsZWN0aW9uLFxyXG4gICAgICAgIHN1Y2Nlc3M6IHJlc3VsdC5zdWNjZXNzLFxyXG4gICAgICAgIC4uLnJlc3VsdFxyXG4gICAgICB9KTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIHJlc3VsdHMucHVzaCh7XHJcbiAgICAgICAgY29sbGVjdGlvbjogdGVzdC5jb2xsZWN0aW9uLFxyXG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgICAgIGVycm9yOiBlcnJvci5tZXNzYWdlXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICByZXR1cm4gcmVzdWx0cztcclxufTsgIl0sIm5hbWVzIjpbImRiIiwicXVlcnkiLCJjb2xsZWN0aW9uIiwiZ2V0RG9jcyIsIndoZXJlIiwibGltaXQiLCJTd2FsIiwidmFsaWRhdGVkSW5kZXhlcyIsIlNldCIsInZhbGlkYXRlRmlyZXN0b3JlSW5kZXgiLCJjb2xsZWN0aW9uUGF0aCIsImNvbmRpdGlvbnMiLCJvcmRlckJ5RmllbGRzIiwicXVlcnlJZCIsImdlbmVyYXRlUXVlcnlJZCIsImhhcyIsInN1Y2Nlc3MiLCJ2YWxpZGF0ZWQiLCJ0ZXN0UXVlcnkiLCJidWlsZFRlc3RRdWVyeSIsImFkZCIsImVycm9yIiwiY29uc29sZSIsIm1lc3NhZ2UiLCJpbmNsdWRlcyIsImluZGV4VXJsIiwiZXh0cmFjdEluZGV4VXJsIiwiaXNJbmRleEVycm9yIiwiY29uZGl0aW9uc1N0ciIsIm1hcCIsImMiLCJmaWVsZCIsIm9wZXJhdG9yIiwidmFsdWUiLCJqb2luIiwib3JkZXJCeVN0ciIsImJhc2VRdWVyeSIsImZvckVhY2giLCJjb25kaXRpb24iLCJsZW5ndGgiLCJvcmRlckJ5IiwicmVxdWlyZSIsImRpcmVjdGlvbiIsImVycm9yTWVzc2FnZSIsInVybE1hdGNoIiwibWF0Y2giLCJoYW5kbGVJbmRleEVycm9yIiwiYXV0b09wZW4iLCJyZXN1bHQiLCJmaXJlIiwidGl0bGUiLCJodG1sIiwiaWNvbiIsInNob3dDYW5jZWxCdXR0b24iLCJjb25maXJtQnV0dG9uVGV4dCIsImNhbmNlbEJ1dHRvblRleHQiLCJjb25maXJtQnV0dG9uQ29sb3IiLCJ3aW5kb3ciLCJvcGVuIiwiaXNDb25maXJtZWQiLCJsb2NhdGlvbiIsInJlbG9hZCIsInNhZmVRdWVyeSIsInJlcXVpcmVJbmRleCIsInZhbGlkYXRpb25SZXN1bHQiLCJxdWVyeU9iaiIsInF1ZXJ5U25hcHNob3QiLCJyZXN1bHRzIiwiZG9jIiwicHVzaCIsImlkIiwiZGF0YSIsInZhbGlkYXRlUmVxdWlyZWRJbmRleGVzIiwiaW5kZXhUZXN0cyIsInRlc3QiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/utils/firebase-index-manager.js\n"));

/***/ })

}]);