"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("_app-pages-browser_app_components_forms_WardForm_EventHandlers_js-_app-pages-browser_app_comp-4828b8",{

/***/ "(app-pages-browser)/./app/components/forms/WardForm/DataFetchers.js":
/*!*******************************************************!*\
  !*** ./app/components/forms/WardForm/DataFetchers.js ***!
  \*******************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculatePatientCensus: () => (/* binding */ calculatePatientCensus),\n/* harmony export */   checkApprovalStatus: () => (/* binding */ checkApprovalStatus),\n/* harmony export */   checkFinalApprovalStatus: () => (/* binding */ checkFinalApprovalStatus),\n/* harmony export */   checkMorningShiftDataExists: () => (/* binding */ checkMorningShiftDataExists),\n/* harmony export */   checkPast30DaysRecords: () => (/* binding */ checkPast30DaysRecords),\n/* harmony export */   fetchAndPrepareWardData: () => (/* binding */ fetchAndPrepareWardData),\n/* harmony export */   fetchApprovalData: () => (/* binding */ fetchApprovalData),\n/* harmony export */   fetchDatesWithData: () => (/* binding */ fetchDatesWithData),\n/* harmony export */   fetchLast7DaysData: () => (/* binding */ fetchLast7DaysData),\n/* harmony export */   fetchLatestRecord: () => (/* binding */ fetchLatestRecord),\n/* harmony export */   fetchPreviousShiftData: () => (/* binding */ fetchPreviousShiftData),\n/* harmony export */   fetchPreviousWardData: () => (/* binding */ fetchPreviousWardData),\n/* harmony export */   fetchWardData: () => (/* binding */ fetchWardData),\n/* harmony export */   formatDate: () => (/* binding */ formatDate)\n/* harmony export */ });\n/* harmony import */ var _lib_dataAccess__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/dataAccess */ \"(app-pages-browser)/./app/lib/dataAccess.js\");\n/* harmony import */ var _lib_firebase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../lib/firebase */ \"(app-pages-browser)/./app/lib/firebase.js\");\n/* harmony import */ var _barrel_optimize_names_format_date_fns__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! __barrel_optimize__?names=format!=!date-fns */ \"(app-pages-browser)/./node_modules/date-fns/esm/format/index.js\");\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! firebase/firestore */ \"(app-pages-browser)/./node_modules/firebase/firestore/dist/esm/index.esm.js\");\n/* __next_internal_client_entry_do_not_use__ checkApprovalStatus,fetchWardData,checkMorningShiftDataExists,fetchLast7DaysData,calculatePatientCensus,checkFinalApprovalStatus,fetchDatesWithData,fetchPreviousShiftData,fetchApprovalData,fetchLatestRecord,checkPast30DaysRecords,fetchPreviousWardData,formatDate,fetchAndPrepareWardData auto */ \n\n\n\n\n/**\n * ฟังก์ชันสำหรับตรวจสอบการอนุมัติ\n * @param {string} date วันที่ตรวจสอบ\n * @param {string} shift กะงานที่ตรวจสอบ\n * @param {string} wardId รหัสวอร์ด\n * @returns {Promise<Object>} สถานะการอนุมัติ\n */ const checkApprovalStatus = async (date, shift, wardId)=>{\n    try {\n        const formattedDate = (0,_barrel_optimize_names_format_date_fns__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(new Date(date), 'yyyy-MM-dd');\n        // ตรวจสอบข้อมูลในฐานข้อมูล\n        const wardData = await (0,_lib_dataAccess__WEBPACK_IMPORTED_MODULE_0__.getWardDataByDate)(formattedDate, shift, wardId);\n        if (!wardData) {\n            return {\n                status: 'not_submitted',\n                message: 'ยังไม่ได้บันทึกข้อมูล'\n            };\n        }\n        if (wardData.approvalStatus === 'approved') {\n            return {\n                status: 'approved',\n                message: 'ได้รับการอนุมัติแล้ว',\n                timestamp: wardData.approvalTimestamp,\n                approvedBy: wardData.approvedBy\n            };\n        }\n        if (wardData.approvalStatus === 'rejected') {\n            return {\n                status: 'rejected',\n                message: 'ถูกปฏิเสธการอนุมัติ',\n                timestamp: wardData.approvalTimestamp,\n                rejectedBy: wardData.rejectedBy,\n                rejectionReason: wardData.rejectionReason\n            };\n        }\n        return {\n            status: 'pending',\n            message: 'รอการอนุมัติ'\n        };\n    } catch (error) {\n        console.error('Error checking approval status:', error);\n        return {\n            status: 'error',\n            message: 'เกิดข้อผิดพลาดในการตรวจสอบ'\n        };\n    }\n};\n/**\n * ฟังก์ชันสำหรับดึงข้อมูลวอร์ด\n * @param {string} date วันที่ต้องการดึงข้อมูล\n * @param {string} wardId รหัสวอร์ด\n * @param {string} shift กะงาน\n * @returns {Promise<Object|null>} ข้อมูลวอร์ดหรือ null ถ้าไม่พบ\n */ const fetchWardData = async (date, wardId, shift)=>{\n    try {\n        console.log('Fetching ward data:', {\n            date,\n            wardId,\n            shift\n        });\n        const formattedDate = (0,_barrel_optimize_names_format_date_fns__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(new Date(date), 'yyyy-MM-dd');\n        const docId = \"\".concat(formattedDate, \"_\").concat(wardId, \"_\").concat(shift);\n        // ลองดึงข้อมูลจาก wardDataFinal ก่อน\n        const docRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.doc)(_lib_firebase__WEBPACK_IMPORTED_MODULE_1__.db, 'wardDataFinal', docId);\n        const docSnap = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getDoc)(docRef);\n        if (docSnap.exists()) {\n            console.log('Found data in wardDataFinal');\n            return docSnap.data();\n        }\n        // ถ้าไม่มีข้อมูลใน wardDataFinal ให้ลองดึงข้อมูลร่าง\n        const draftsRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.collection)(_lib_firebase__WEBPACK_IMPORTED_MODULE_1__.db, 'wardDataDrafts');\n        const draftsQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.query)(draftsRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.where)('date', '==', formattedDate), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.where)('wardId', '==', wardId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.where)('shift', '==', shift));\n        const draftsSnap = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getDocs)(draftsQuery);\n        if (!draftsSnap.empty) {\n            console.log('Found data in wardDataDrafts');\n            // เรียงลำดับตาม timestamp เพื่อเอาร่างล่าสุด\n            const drafts = [];\n            draftsSnap.forEach((doc)=>{\n                drafts.push({\n                    id: doc.id,\n                    ...doc.data()\n                });\n            });\n            drafts.sort((a, b)=>new Date(b.timestamp) - new Date(a.timestamp));\n            return drafts[0];\n        }\n        console.log('No data found for this date/shift');\n        return null;\n    } catch (error) {\n        console.error('Error fetching ward data:', error);\n        throw error;\n    }\n};\n/**\n * ฟังก์ชันสำหรับตรวจสอบว่ามีข้อมูลกะเช้าหรือไม่\n * @param {Date} date วันที่ต้องการตรวจสอบ\n * @param {string} wardId รหัสวอร์ด\n * @returns {Promise<boolean>} true ถ้ามีข้อมูลกะเช้า, false ถ้าไม่มี\n */ const checkMorningShiftDataExists = async (date, wardId)=>{\n    try {\n        const formattedDate = (0,_barrel_optimize_names_format_date_fns__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(new Date(date), 'yyyy-MM-dd');\n        const morningData = await (0,_lib_dataAccess__WEBPACK_IMPORTED_MODULE_0__.getWardDataByDate)(formattedDate, 'เช้า', wardId);\n        return morningData ? true : false;\n    } catch (error) {\n        console.error('Error checking morning shift data:', error);\n        return false;\n    }\n};\n/**\n * ฟังก์ชันสำหรับดึงข้อมูล 7 วันย้อนหลัง\n * @param {string} wardId รหัส ward\n * @param {Date} currentDate วันที่ปัจจุบัน (optional)\n * @returns {Promise<Object|null>} ข้อมูลล่าสุดภายใน 7 วันย้อนหลัง หรือ null ถ้าไม่พบข้อมูล\n */ const fetchLast7DaysData = async (currentDate, wardId)=>{\n    try {\n        // สร้างอาร์เรย์ของวันที่ย้อนหลัง 7 วัน\n        const dates = [];\n        for(let i = 1; i <= 7; i++){\n            const date = new Date(currentDate);\n            date.setDate(date.getDate() - i);\n            dates.push((0,_barrel_optimize_names_format_date_fns__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(date, 'yyyy-MM-dd'));\n        }\n        // ดึงข้อมูลกะเช้าจากทั้ง 7 วันย้อนหลัง\n        const promises = dates.map((date)=>(0,_lib_dataAccess__WEBPACK_IMPORTED_MODULE_0__.getWardDataByDate)(date, 'เช้า', wardId));\n        const results = await Promise.all(promises);\n        // กรองเฉพาะวันที่มีข้อมูล\n        const validData = results.filter((data)=>data !== null);\n        // ถ้าไม่มีข้อมูลเลย ส่งค่าว่าง\n        if (validData.length === 0) {\n            return null;\n        }\n        // เรียงลำดับข้อมูลตามวันที่ (ล่าสุดก่อน)\n        validData.sort((a, b)=>new Date(b.date) - new Date(a.date));\n        // ส่งข้อมูลล่าสุดกลับไป\n        return validData[0];\n    } catch (error) {\n        console.error('Error fetching last 7 days data:', error);\n        return null;\n    }\n};\n/**\n * ฟังก์ชันสำหรับคำนวณค่า Patient Census\n * @param {Object} formData ข้อมูลฟอร์ม\n * @returns {string|number} ค่า Patient Census ที่คำนวณได้ หรือ empty string ถ้าไม่มีข้อมูล\n */ const calculatePatientCensus = (patientData)=>{\n    if (!patientData) {\n        console.warn('ไม่สามารถคำนวณได้: ข้อมูล patientData ไม่มี');\n        return '';\n    }\n    // แปลงค่าเป็นตัวเลข และใช้ parseInt ด้วย radix เพื่อป้องกันการแปลงค่าที่ผิดพลาด\n    const hospitalPatientcensus = parseInt(patientData.hospitalPatientcensus || '0', 10) || 0;\n    const newAdmit = parseInt(patientData.newAdmit || '0', 10) || 0;\n    const transferIn = parseInt(patientData.transferIn || '0', 10) || 0;\n    const referIn = parseInt(patientData.referIn || '0', 10) || 0;\n    const transferOut = parseInt(patientData.transferOut || '0', 10) || 0;\n    const referOut = parseInt(patientData.referOut || '0', 10) || 0;\n    const discharge = parseInt(patientData.discharge || '0', 10) || 0;\n    const dead = parseInt(patientData.dead || '0', 10) || 0;\n    // Debug: แสดงค่าที่นำมาคำนวณ\n    console.log('DataFetchers - Patient Census Values:', {\n        hospitalPatientcensus,\n        newAdmit,\n        transferIn,\n        referIn,\n        transferOut,\n        referOut,\n        discharge,\n        dead\n    });\n    // คำนวณตามสูตร: Hospital Patient Census + New Admit + Transfer In + Refer In - Transfer Out - Refer Out - Discharge - Dead\n    const total = hospitalPatientcensus + newAdmit + transferIn + referIn - transferOut - referOut - discharge - dead;\n    console.log(\"DataFetchers คำนวณ Patient Census: \".concat(hospitalPatientcensus, \" + \").concat(newAdmit, \" + \").concat(transferIn, \" + \").concat(referIn, \" - \").concat(transferOut, \" - \").concat(referOut, \" - \").concat(discharge, \" - \").concat(dead, \" = \").concat(total));\n    // Display empty string if total is 0 and all input fields are empty\n    const shouldShowEmpty = total === 0 && !patientData.hospitalPatientcensus && !patientData.newAdmit && !patientData.transferIn && !patientData.referIn && !patientData.transferOut && !patientData.referOut && !patientData.discharge && !patientData.dead;\n    return shouldShowEmpty ? '' : total.toString();\n};\n/**\n * ฟังก์ชันสำหรับตรวจสอบสถานะการอนุมัติขั้นสุดท้าย\n * @param {Date} date วันที่ต้องการตรวจสอบ\n * @param {string} wardId รหัสวอร์ด\n * @param {string} shift กะการทำงาน\n * @returns {Promise<boolean>} true ถ้าได้รับการอนุมัติแล้ว, false ถ้ายังไม่ได้รับการอนุมัติ\n */ const checkFinalApprovalStatus = async (date, shift, wardId, supervisorId)=>{\n    try {\n        // ดึงข้อมูลวอร์ด\n        const wardData = await (0,_lib_dataAccess__WEBPACK_IMPORTED_MODULE_0__.getWardDataByDate)(date, shift, wardId);\n        if (!wardData) return {\n            approved: false,\n            message: 'ไม่พบข้อมูล'\n        };\n        // ตรวจสอบว่ามีการบันทึกจริงหรือไม่\n        if (wardData.status !== 'final') {\n            return {\n                approved: false,\n                message: 'ข้อมูลยังไม่ถูกบันทึกเป็นฉบับสมบูรณ์'\n            };\n        }\n        // ตรวจสอบรหัสผู้อนุมัติ\n        if (wardData.approvedBy !== supervisorId) {\n            // ดึงข้อมูลผู้อนุมัติจากฐานข้อมูล\n            try {\n                const approverData = await (0,_lib_dataAccess__WEBPACK_IMPORTED_MODULE_0__.getUserDataFromCollection)(wardData.approvedBy);\n                const approverName = (approverData === null || approverData === void 0 ? void 0 : approverData.name) || 'ไม่ทราบชื่อ';\n                return {\n                    approved: false,\n                    message: \"อนุมัติแล้วโดย \".concat(approverName)\n                };\n            } catch (error) {\n                return {\n                    approved: false,\n                    message: 'อนุมัติแล้วโดยผู้ใช้ท่านอื่น'\n                };\n            }\n        }\n        // กรณีที่อนุมัติแล้วโดยผู้ใช้คนปัจจุบัน\n        return {\n            approved: true,\n            message: 'คุณได้อนุมัติข้อมูลนี้แล้ว'\n        };\n    } catch (error) {\n        console.error('Error checking approval status:', error);\n        return {\n            approved: false,\n            message: 'เกิดข้อผิดพลาดในการตรวจสอบสถานะ'\n        };\n    }\n};\n/**\n * ฟังก์ชันสำหรับดึงวันที่ที่มีข้อมูลอยู่แล้วในระบบ\n * @param {string} wardId รหัสวอร์ด\n * @returns {Promise<Array<Object>>} อาร์เรย์ของวันที่ที่มีข้อมูล\n */ const fetchDatesWithData = async (wardId)=>{\n    try {\n        if (!wardId) {\n            console.error('fetchDatesWithData: Missing wardId');\n            return [];\n        }\n        // ดึงข้อมูลจากทั้ง collection wardDataFinal และ wardDataDrafts\n        // โค้ดจำลองการดึงข้อมูล\n        const dates = [\n            {\n                date: '2025-03-18',\n                shifts: [\n                    'Morning (07:00-19:00)',\n                    'Night (19:00-07:00)'\n                ]\n            },\n            {\n                date: '2025-03-17',\n                shifts: [\n                    'Morning (07:00-19:00)'\n                ]\n            },\n            {\n                date: '2025-03-16',\n                shifts: [\n                    'Night (19:00-07:00)'\n                ]\n            }\n        ];\n        return dates;\n    } catch (error) {\n        console.error('Error fetching dates with data:', error);\n        return [];\n    }\n};\n/**\n * ฟังก์ชันสำหรับดึงข้อมูลกะงานก่อนหน้า\n * @param {string} date วันที่\n * @param {string} wardId รหัสวอร์ด\n * @param {string} currentShift กะงานปัจจุบัน\n * @returns {Promise<Object|null>} ข้อมูลกะงานก่อนหน้า หรือ null ถ้าไม่พบ\n */ const fetchPreviousShiftData = async (date, wardId, currentShift)=>{\n    try {\n        if (!date || !wardId || !currentShift) {\n            return null;\n        }\n        // กำหนดกะงานก่อนหน้า\n        let previousShift;\n        let previousDate = new Date(date);\n        if (currentShift === 'Morning (07:00-19:00)') {\n            // ถ้าเป็นกะเช้า ให้ดูกะดึกของวันก่อนหน้า\n            previousDate.setDate(previousDate.getDate() - 1);\n            previousShift = 'Night (19:00-07:00)';\n        } else {\n            // ถ้าเป็นกะดึก ให้ดูกะเช้าของวันเดียวกัน\n            previousShift = 'Morning (07:00-19:00)';\n        }\n        const formattedPreviousDate = (0,_barrel_optimize_names_format_date_fns__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(previousDate, 'yyyy-MM-dd');\n        const previousData = await (0,_lib_dataAccess__WEBPACK_IMPORTED_MODULE_0__.getWardDataByDate)(formattedPreviousDate, previousShift, wardId);\n        return previousData;\n    } catch (error) {\n        console.error('Error fetching previous shift data:', error);\n        return null;\n    }\n};\n/**\n * ฟังก์ชันสำหรับดึงข้อมูลการอนุมัติ\n * @param {string} date วันที่\n * @param {string} wardId รหัสวอร์ด\n * @param {string} shift กะงาน\n * @returns {Promise<Object|null>} ข้อมูลการอนุมัติ หรือ null ถ้าไม่พบ\n */ const fetchApprovalData = async (date, wardId, shift)=>{\n    try {\n        if (!date || !wardId || !shift) {\n            return null;\n        }\n        const formattedDate = (0,_barrel_optimize_names_format_date_fns__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(new Date(date), 'yyyy-MM-dd');\n        const wardData = await (0,_lib_dataAccess__WEBPACK_IMPORTED_MODULE_0__.getWardDataByDate)(formattedDate, shift, wardId);\n        if (!wardData) {\n            return null;\n        }\n        return {\n            status: wardData.approvalStatus || 'pending',\n            approvedBy: wardData.approvedBy || null,\n            approvalTimestamp: wardData.approvalTimestamp || null,\n            rejectedBy: wardData.rejectedBy || null,\n            rejectionReason: wardData.rejectionReason || null,\n            comments: wardData.approvalComments || null\n        };\n    } catch (error) {\n        console.error('Error fetching approval data:', error);\n        return null;\n    }\n};\n/**\n * ฟังก์ชันสำหรับดึงข้อมูลล่าสุด\n * @param {string} wardId รหัสวอร์ด\n * @returns {Promise<Object|null>} ข้อมูลล่าสุด หรือ null ถ้าไม่พบ\n */ const fetchLatestRecord = async (wardId)=>{\n    try {\n        if (!wardId) {\n            return null;\n        }\n        // ตรวจสอบย้อนหลังจากวันปัจจุบันไปจนถึง 30 วันก่อนหน้า\n        const currentDate = new Date();\n        let latestData = null;\n        for(let i = 0; i < 30; i++){\n            const checkDate = new Date(currentDate);\n            checkDate.setDate(checkDate.getDate() - i);\n            const formattedDate = (0,_barrel_optimize_names_format_date_fns__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(checkDate, 'yyyy-MM-dd');\n            // ตรวจสอบกะดึกก่อน แล้วจึงตรวจสอบกะเช้า\n            const nightData = await (0,_lib_dataAccess__WEBPACK_IMPORTED_MODULE_0__.getWardDataByDate)(formattedDate, 'Night (19:00-07:00)', wardId);\n            if (nightData) {\n                return nightData;\n            }\n            const morningData = await (0,_lib_dataAccess__WEBPACK_IMPORTED_MODULE_0__.getWardDataByDate)(formattedDate, 'Morning (07:00-19:00)', wardId);\n            if (morningData) {\n                return morningData;\n            }\n        }\n        return null;\n    } catch (error) {\n        console.error('Error fetching latest record:', error);\n        return null;\n    }\n};\n/**\n * ฟังก์ชันสำหรับตรวจสอบว่ามีข้อมูลใน 30 วันล่าสุดหรือไม่\n * @param {string} wardId รหัสวอร์ด\n * @returns {Promise<boolean>} true ถ้ามีข้อมูลใน 30 วันล่าสุด, false ถ้าไม่มี\n */ const checkPast30DaysRecords = async (wardId)=>{\n    try {\n        if (!wardId) {\n            return false;\n        }\n        const latestRecord = await fetchLatestRecord(wardId);\n        return latestRecord !== null;\n    } catch (error) {\n        console.error('Error checking past 30 days records:', error);\n        return false;\n    }\n};\n/**\n * ฟังก์ชันสำหรับดึงข้อมูลย้อนหลัง X วัน\n */ const fetchPreviousWardData = async function(department, currentDate) {\n    let days = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 7;\n    try {\n        console.log(\"Getting previous \".concat(days, \" days data for \").concat(department, \" from \").concat(currentDate));\n        // โค้ดดึงข้อมูลย้อนหลัง...\n        // (คัดลอกจาก WardForm.js ใส่ตรงนี้)\n        return [];\n    } catch (error) {\n        console.error('Error getting previous data:', error);\n        return [];\n    }\n};\n/**\n * แปลงรูปแบบวันที่\n */ const formatDate = (date)=>{\n    if (!date) return '';\n    const d = new Date(date);\n    if (isNaN(d.getTime())) return '';\n    return (0,_barrel_optimize_names_format_date_fns__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(d, 'yyyy-MM-dd');\n};\n/**\n * ฟังก์ชันสำหรับดึงข้อมูลและจัดการการโหลดข้อมูลอัตโนมัติตามกะ\n * @param {string} date วันที่\n * @param {string} wardId รหัสวอร์ด\n * @param {string} shift กะงาน\n * @returns {Promise<Object>} ข้อมูลที่โหลด พร้อมสถานะ\n */ const fetchAndPrepareWardData = async (date, wardId, shift)=>{\n    try {\n        console.log(\"Fetching and preparing data for \".concat(date, \", \").concat(wardId, \", \").concat(shift));\n        // ดึงข้อมูลของกะปัจจุบัน\n        const wardData = await fetchWardData(date, wardId, shift);\n        let patientCensusTotal = 0;\n        let sourceMessage = '';\n        // ตรวจสอบว่ามีข้อมูลหรือไม่\n        if (wardData) {\n            console.log('Found existing data for this shift');\n            // คำนวณ Patient Census ถ้ามีข้อมูล\n            if (wardData.patientCensus) {\n                patientCensusTotal = calculatePatientCensus(wardData.patientCensus);\n                sourceMessage = 'ข้อมูลผู้ป่วยคำนวณจากข้อมูลในระบบ';\n            }\n            return {\n                data: wardData,\n                hasData: true,\n                patientCensusTotal,\n                sourceMessage\n            };\n        }\n        // ถ้าไม่มีข้อมูล จะดึงข้อมูลตามกฎที่กำหนด\n        if (shift === 'Morning (07:00-19:00)') {\n            // กรณีกะเช้า: ดึงข้อมูลย้อนหลัง 7 วัน\n            const previousDate = new Date(date);\n            previousDate.setDate(previousDate.getDate() - 7);\n            const formattedPreviousDate = (0,_barrel_optimize_names_format_date_fns__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(previousDate, 'yyyy-MM-dd');\n            console.log('No data found for morning shift, checking data from 7 days ago:', formattedPreviousDate);\n            const previousData = await fetchWardData(formattedPreviousDate, wardId, shift);\n            if (previousData) {\n                console.log('Found previous data from 7 days ago');\n                // คำนวณ Patient Census ถ้ามีข้อมูล\n                if (previousData.patientCensus) {\n                    patientCensusTotal = calculatePatientCensus(previousData.patientCensus);\n                    sourceMessage = 'ข้อมูลผู้ป่วยคำนวณจากข้อมูล 7 วันก่อน';\n                }\n                // สร้างข้อมูลใหม่โดยใช้ข้อมูลเดิมแต่ไม่เอา ID และข้อมูลเฉพาะอื่นๆ\n                const newData = {\n                    ...previousData\n                };\n                delete newData.id;\n                delete newData.timestamp;\n                delete newData.createdAt;\n                delete newData.updatedAt;\n                delete newData.approvalStatus;\n                delete newData.approvedBy;\n                delete newData.approvalTimestamp;\n                // อัปเดตค่า Patient Census\n                if (newData.patientCensus) {\n                    newData.patientCensus.total = patientCensusTotal.toString();\n                }\n                return {\n                    data: newData,\n                    hasData: true,\n                    patientCensusTotal,\n                    sourceMessage,\n                    isAutoFilledFromHistory: true\n                };\n            }\n        } else if (shift === 'Night (19:00-07:00)') {\n            // กรณีกะดึก: ดึงข้อมูลจากกะเช้าของวันเดียวกัน\n            console.log('No data found for night shift, checking morning shift from same day');\n            const morningData = await fetchWardData(date, wardId, 'Morning (07:00-19:00)');\n            if (morningData) {\n                console.log('Found morning shift data from same day');\n                // คำนวณ Patient Census ถ้ามีข้อมูล\n                if (morningData.patientCensus) {\n                    patientCensusTotal = calculatePatientCensus(morningData.patientCensus);\n                    sourceMessage = 'ข้อมูลผู้ป่วยคำนวณจากข้อมูลกะเช้า';\n                }\n                // สร้างข้อมูลใหม่โดยใช้ข้อมูลจากกะเช้า\n                const newData = {\n                    ...morningData\n                };\n                delete newData.id;\n                delete newData.timestamp;\n                delete newData.createdAt;\n                delete newData.updatedAt;\n                delete newData.approvalStatus;\n                delete newData.approvedBy;\n                delete newData.approvalTimestamp;\n                // อัปเดตค่า Patient Census และ Overall Data (สำหรับกะดึก)\n                if (newData.patientCensus) {\n                    newData.patientCensus.total = patientCensusTotal.toString();\n                }\n                newData.overallData = patientCensusTotal.toString();\n                return {\n                    data: newData,\n                    hasData: true,\n                    patientCensusTotal,\n                    sourceMessage,\n                    isAutoFilledFromHistory: true\n                };\n            }\n        }\n        // ถ้าไม่มีข้อมูลใดๆ ให้สร้างข้อมูลเปล่า\n        return {\n            data: null,\n            hasData: false,\n            patientCensusTotal: 0,\n            sourceMessage: 'ไม่พบข้อมูลก่อนหน้า'\n        };\n    } catch (error) {\n        console.error('Error fetching and preparing ward data:', error);\n        return {\n            data: null,\n            hasData: false,\n            patientCensusTotal: 0,\n            sourceMessage: 'เกิดข้อผิดพลาดในการโหลดข้อมูล',\n            error: error.message\n        };\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/components/forms/WardForm/DataFetchers.js\n"));

/***/ })

});