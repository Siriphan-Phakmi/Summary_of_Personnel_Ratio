"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page/ward-form/page",{

/***/ "(app-pages-browser)/./app/components/forms/WardForm/DataFetchers.js":
/*!*******************************************************!*\
  !*** ./app/components/forms/WardForm/DataFetchers.js ***!
  \*******************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkApprovalStatus: () => (/* binding */ checkApprovalStatus),\n/* harmony export */   checkPast30DaysRecords: () => (/* binding */ checkPast30DaysRecords),\n/* harmony export */   checkPast7DaysData: () => (/* binding */ checkPast7DaysData),\n/* harmony export */   fetchApprovalData: () => (/* binding */ fetchApprovalData),\n/* harmony export */   fetchDatesWithData: () => (/* binding */ fetchDatesWithData),\n/* harmony export */   fetchLatestRecord: () => (/* binding */ fetchLatestRecord),\n/* harmony export */   fetchPreviousShiftData: () => (/* binding */ fetchPreviousShiftData),\n/* harmony export */   fetchWardData: () => (/* binding */ fetchWardData),\n/* harmony export */   fetchWardHistory: () => (/* binding */ fetchWardHistory)\n/* harmony export */ });\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! firebase/firestore */ \"(app-pages-browser)/./node_modules/firebase/firestore/dist/esm/index.esm.js\");\n/* harmony import */ var _lib_firebase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../lib/firebase */ \"(app-pages-browser)/./app/lib/firebase.js\");\n/* harmony import */ var _utils_dateUtils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../utils/dateUtils */ \"(app-pages-browser)/./app/utils/dateUtils.js\");\n/* harmony import */ var _utils_functionHelper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../utils/functionHelper */ \"(app-pages-browser)/./app/utils/functionHelper.js\");\n/* harmony import */ var _utils_firebase_helpers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../utils/firebase-helpers */ \"(app-pages-browser)/./app/utils/firebase-helpers.js\");\n/* __next_internal_client_entry_do_not_use__ fetchDatesWithData,fetchPreviousShiftData,fetchApprovalData,checkApprovalStatus,fetchLatestRecord,fetchWardData,fetchWardHistory,checkPast30DaysRecords,checkPast7DaysData auto */ \n\n\n\n\n// Create a cache for storing fetched data\nconst dataCache = new Map();\nconst CACHE_EXPIRY = 5 * 60 * 1000; // 5 minutes\nconst fetchDatesWithData = async (selectedWard)=>{\n    try {\n        if (!selectedWard) {\n            console.warn('fetchDatesWithData: selectedWard is undefined or null');\n            return [];\n        }\n        const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_lib_firebase__WEBPACK_IMPORTED_MODULE_1__.db, 'wardDailyRecords'), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('wardId', '==', selectedWard));\n        const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(q);\n        const dates = [];\n        querySnapshot.forEach((doc)=>{\n            const data = doc.data();\n            if (data.date) {\n                const dateObj = new Date(data.date);\n                if (!isNaN(dateObj.getTime())) {\n                    dates.push(dateObj);\n                }\n            }\n        });\n        return dates;\n    } catch (error) {\n        console.error('Error fetching dates with data:', error);\n        return [];\n    }\n};\nconst fetchPreviousShiftData = async function(date, targetWard) {\n    let shift = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;\n    try {\n        if (!targetWard) {\n            console.warn('fetchPreviousShiftData: targetWard is undefined or null');\n            return null;\n        }\n        const dateObj = new Date(date);\n        const dateString = (0,_utils_dateUtils__WEBPACK_IMPORTED_MODULE_2__.getUTCDateString)(dateObj);\n        // ถ้าไม่ระบุกะ ดึงข้อมูลทุกกะของวันนั้น\n        let q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_lib_firebase__WEBPACK_IMPORTED_MODULE_1__.db, 'wardDailyRecords'), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('wardId', '==', targetWard), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('date', '==', dateString));\n        if (shift === 'ดึก') {\n            // ถ้าเป็นกะดึก ให้ดึงข้อมูลกะเช้าของวันเดียวกัน\n            q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_lib_firebase__WEBPACK_IMPORTED_MODULE_1__.db, 'wardDailyRecords'), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('wardId', '==', targetWard), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('date', '==', dateString), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('shift', '==', 'เช้า'));\n        } else if (shift === 'เช้า') {\n            // ถ้าเป็นกะเช้า ให้ดึงข้อมูลกะดึกของวันก่อนหน้า\n            const yesterday = new Date(dateObj);\n            yesterday.setDate(yesterday.getDate() - 1);\n            const yesterdayString = (0,_utils_dateUtils__WEBPACK_IMPORTED_MODULE_2__.getUTCDateString)(yesterday);\n            q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_lib_firebase__WEBPACK_IMPORTED_MODULE_1__.db, 'wardDailyRecords'), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('wardId', '==', targetWard), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('date', '==', yesterdayString), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('shift', '==', 'ดึก'));\n        }\n        const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(q);\n        if (querySnapshot.empty) {\n            return null;\n        }\n        if (shift) {\n            // ถ้าระบุกะ ดึงข้อมูลเฉพาะกะที่ต้องการ\n            const doc = querySnapshot.docs[0];\n            if (doc) {\n                const data = doc.data();\n                return {\n                    id: doc.id,\n                    ...data\n                };\n            }\n            return null;\n        }\n        // ถ้าไม่ระบุกะ รวบรวมข้อมูลทุกกะ\n        const shifts = [];\n        querySnapshot.forEach((doc)=>{\n            const data = doc.data();\n            shifts.push({\n                id: doc.id,\n                ...data\n            });\n        });\n        // เรียงลำดับตามกะ (เช้า, ดึก)\n        shifts.sort((a, b)=>{\n            const order = {\n                'เช้า': 1,\n                'ดึก': 2\n            };\n            return order[a.shift] - order[b.shift];\n        });\n        return shifts.length > 0 ? shifts : null;\n    } catch (error) {\n        console.error('Error fetching previous shift data:', error);\n        return null;\n    }\n};\nconst fetchApprovalData = async function(date, targetWard) {\n    let shift = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;\n    try {\n        if (!targetWard) {\n            console.warn('fetchApprovalData: targetWard is undefined or null');\n            return null;\n        }\n        const dateString = (0,_utils_dateUtils__WEBPACK_IMPORTED_MODULE_2__.getUTCDateString)(new Date(date));\n        let q;\n        if (shift) {\n            // ถ้าระบุกะ จะดึงข้อมูลเฉพาะกะนั้น\n            q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_lib_firebase__WEBPACK_IMPORTED_MODULE_1__.db, 'wardDailyRecords'), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('wardId', '==', targetWard), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('date', '==', dateString), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('shift', '==', shift));\n        } else {\n            // ถ้าไม่ระบุกะ จะดึงข้อมูลทั้งหมดของวันนั้น\n            q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_lib_firebase__WEBPACK_IMPORTED_MODULE_1__.db, 'wardDailyRecords'), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('wardId', '==', targetWard), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('date', '==', dateString));\n        }\n        const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(q);\n        if (querySnapshot.empty) {\n            return null; // ไม่พบข้อมูล\n        }\n        // ถ้ามีการระบุกะ จะดึงข้อมูลเฉพาะกะนั้น\n        if (shift) {\n            if (!querySnapshot.empty) {\n                const doc = querySnapshot.docs[0];\n                const data = doc.data();\n                return {\n                    id: doc.id,\n                    recorded: true,\n                    approved: data.isApproved || false,\n                    approvedBy: data.approvedBy,\n                    approvedAt: data.approvedAt,\n                    isDraft: data.isDraft || false\n                };\n            }\n            return null;\n        }\n        // ถ้าไม่ระบุกะ จะรวบรวมข้อมูลทุกกะ\n        const shiftData = {};\n        querySnapshot.forEach((doc)=>{\n            const data = doc.data();\n            shiftData[data.shift] = {\n                id: doc.id,\n                recorded: true,\n                approved: data.isApproved || false,\n                approvedBy: data.approvedBy,\n                approvedAt: data.approvedAt,\n                isDraft: data.isDraft || false\n            };\n        });\n        return shiftData;\n    } catch (error) {\n        console.error('Error fetching approval data:', error);\n        return null;\n    }\n};\nconst checkApprovalStatus = async function(date, targetWard) {\n    let shift = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;\n    try {\n        const approvalData = await fetchApprovalData(date, targetWard, shift);\n        if (!approvalData) {\n            return {\n                status: 'not_recorded',\n                message: 'ยังไม่มีการบันทึกข้อมูล'\n            };\n        }\n        // ถ้าระบุกะ\n        if (shift) {\n            if (approvalData.isDraft) {\n                return {\n                    status: 'draft',\n                    message: 'อยู่ในสถานะฉบับร่าง'\n                };\n            }\n            if (approvalData.approved) {\n                return {\n                    status: 'approved',\n                    message: 'ได้รับการอนุมัติแล้ว',\n                    approvedBy: approvalData.approvedBy,\n                    approvedAt: approvalData.approvedAt\n                };\n            }\n            return {\n                status: 'pending_approval',\n                message: 'รอการอนุมัติ'\n            };\n        }\n        // ถ้าไม่ระบุกะ ตรวจสอบทุกกะ\n        const allShifts = [\n            'เช้า',\n            'ดึก'\n        ];\n        const shiftStatuses = {};\n        allShifts.forEach((s)=>{\n            if (approvalData[s]) {\n                if (approvalData[s].isDraft) {\n                    shiftStatuses[s] = {\n                        status: 'draft',\n                        message: 'อยู่ในสถานะฉบับร่าง'\n                    };\n                } else if (approvalData[s].approved) {\n                    shiftStatuses[s] = {\n                        status: 'approved',\n                        message: 'ได้รับการอนุมัติแล้ว',\n                        approvedBy: approvalData[s].approvedBy,\n                        approvedAt: approvalData[s].approvedAt\n                    };\n                } else {\n                    shiftStatuses[s] = {\n                        status: 'pending_approval',\n                        message: 'รอการอนุมัติ'\n                    };\n                }\n            } else {\n                shiftStatuses[s] = {\n                    status: 'not_recorded',\n                    message: 'ยังไม่มีการบันทึกข้อมูล'\n                };\n            }\n        });\n        return shiftStatuses;\n    } catch (error) {\n        console.error('Error checking approval status:', error);\n        return {\n            status: 'error',\n            message: 'เกิดข้อผิดพลาดในการตรวจสอบสถานะ'\n        };\n    }\n};\nconst fetchLatestRecord = async (targetWard)=>{\n    try {\n        if (!targetWard) {\n            console.warn('fetchLatestRecord: targetWard is undefined or null');\n            return null;\n        }\n        const wardDailyRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_lib_firebase__WEBPACK_IMPORTED_MODULE_1__.db, 'wardDailyRecords');\n        const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)(wardDailyRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('wardId', '==', targetWard), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.orderBy)('date', 'desc'), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.limit)(1));\n        const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(q);\n        if (querySnapshot.empty) {\n            return null;\n        }\n        const doc = querySnapshot.docs[0];\n        const data = doc.data();\n        return {\n            id: doc.id,\n            ...data\n        };\n    } catch (error) {\n        console.error('Error fetching latest record:', error);\n        return null;\n    }\n};\n// Modified fetchWardData function with caching and improved error handling\nconst fetchWardData = async (date, selectedWard, selectedShift)=>{\n    try {\n        if (!date || !selectedWard || !selectedShift) {\n            console.warn('fetchWardData: Missing required parameters', {\n                date,\n                selectedWard,\n                selectedShift\n            });\n            return null;\n        }\n        // Create a cache key\n        const cacheKey = \"\".concat(date, \"_\").concat(selectedWard, \"_\").concat(selectedShift);\n        // Check if data is in cache and not expired\n        const cachedData = dataCache.get(cacheKey);\n        if (cachedData && Date.now() - cachedData.timestamp < CACHE_EXPIRY) {\n            console.log('Returning cached data for:', cacheKey);\n            return cachedData.data;\n        }\n        // If not in cache, fetch from Firestore\n        const dateObj = new Date(date);\n        const dateString = (0,_utils_dateUtils__WEBPACK_IMPORTED_MODULE_2__.getUTCDateString)(dateObj);\n        console.log(\"Fetching data for \".concat(selectedWard, \" on \").concat(dateString, \", shift: \").concat(selectedShift));\n        const wardDailyRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_lib_firebase__WEBPACK_IMPORTED_MODULE_1__.db, 'wardDailyRecords');\n        const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)(wardDailyRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('wardId', '==', selectedWard), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('date', '==', dateString));\n        try {\n            const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(q);\n            if (querySnapshot.empty) {\n                console.log(\"No data found for \".concat(selectedWard, \" on \").concat(dateString));\n                return null;\n            }\n            const wardData = querySnapshot.docs[0].data();\n            if (!wardData.shifts || !wardData.shifts[selectedShift]) {\n                console.log(\"No shift data found for \".concat(selectedShift));\n                return null;\n            }\n            // Store in cache\n            dataCache.set(cacheKey, {\n                data: wardData.shifts[selectedShift],\n                timestamp: Date.now()\n            });\n            return wardData.shifts[selectedShift];\n        } catch (error) {\n            // Check if this is an index error and handle it\n            if ((0,_utils_firebase_helpers__WEBPACK_IMPORTED_MODULE_4__.handleFirebaseIndexError)(error)) {\n                return null;\n            }\n            throw error; // Re-throw if not an index error or if handling failed\n        }\n    } catch (error) {\n        console.error('Error fetching ward data:', error);\n        return null;\n    }\n};\n// เพิ่มฟังก์ชันดึงข้อมูลประวัติ\nconst fetchWardHistory = async (wardId, date, shift)=>{\n    try {\n        if (!wardId || !date || !shift) {\n            console.error('fetchWardHistory: Missing required parameters', {\n                wardId,\n                date,\n                shift\n            });\n            return [];\n        }\n        const dateString = (0,_utils_dateUtils__WEBPACK_IMPORTED_MODULE_2__.getUTCDateString)(new Date(date));\n        // ค้นหาข้อมูลทั้งหมดที่ตรงกับ ward, วันที่, และกะที่ระบุ\n        const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_lib_firebase__WEBPACK_IMPORTED_MODULE_1__.db, 'wardDailyRecords'), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('wardId', '==', wardId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('date', '==', dateString), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('shift', '==', shift), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.orderBy)('timestamp', 'desc'));\n        const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(q);\n        const history = [];\n        if (querySnapshot.empty) {\n            return [];\n        }\n        querySnapshot.forEach((doc)=>{\n            const data = doc.data();\n            history.push({\n                id: doc.id,\n                ...data\n            });\n        });\n        return history;\n    } catch (error) {\n        console.error('Error fetching ward history:', error);\n        return [];\n    }\n};\n// เพิ่มฟังก์ชันตรวจสอบข้อมูลย้อนหลัง 30 วัน\nconst checkPast30DaysRecords = async (ward)=>{\n    // ไม่มีการตรวจสอบข้อมูล 30 วันย้อนหลังแล้ว\n    return {\n        canProceed: true,\n        noRecentRecords: false\n    };\n};\nconst checkPast7DaysData = async (ward, date)=>{\n    try {\n        const currentDate = new Date(date);\n        const sevenDaysAgo = new Date(currentDate);\n        sevenDaysAgo.setDate(currentDate.getDate() - 7);\n        const formattedCurrentDate = (0,_utils_dateUtils__WEBPACK_IMPORTED_MODULE_2__.getUTCDateString)(currentDate);\n        const formattedSevenDaysAgo = (0,_utils_dateUtils__WEBPACK_IMPORTED_MODULE_2__.getUTCDateString)(sevenDaysAgo);\n        const wardDailyRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_lib_firebase__WEBPACK_IMPORTED_MODULE_1__.db, 'wardDailyRecords');\n        const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)(wardDailyRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('wardId', '==', ward), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('date', '>=', formattedSevenDaysAgo), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('date', '<=', formattedCurrentDate));\n        const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(q);\n        const records = querySnapshot.docs.map((doc)=>{\n            const data = doc.data();\n            return {\n                id: doc.id,\n                date: data.date\n            };\n        });\n        return {\n            success: true,\n            records\n        };\n    } catch (error) {\n        console.error('Error checking past 7 days data:', error);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC9jb21wb25lbnRzL2Zvcm1zL1dhcmRGb3JtL0RhdGFGZXRjaGVycy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztnT0FDdUY7QUFDNUM7QUFDaUI7QUFDRztBQUN1QjtBQUV0RiwwQ0FBMEM7QUFDMUMsTUFBTVcsWUFBWSxJQUFJQztBQUN0QixNQUFNQyxlQUFlLElBQUksS0FBSyxNQUFNLFlBQVk7QUFFekMsTUFBTUMscUJBQXFCLE9BQU9DO0lBQ3JDLElBQUk7UUFDQSxJQUFJLENBQUNBLGNBQWM7WUFDZkMsUUFBUUMsSUFBSSxDQUFDO1lBQ2IsT0FBTyxFQUFFO1FBQ2I7UUFFQSxNQUFNQyxJQUFJakIseURBQUtBLENBQ1hELDhEQUFVQSxDQUFDTSw2Q0FBRUEsRUFBRSxxQkFDZkoseURBQUtBLENBQUMsVUFBVSxNQUFNYTtRQUcxQixNQUFNSSxnQkFBZ0IsTUFBTWhCLDJEQUFPQSxDQUFDZTtRQUNwQyxNQUFNRSxRQUFRLEVBQUU7UUFFaEJELGNBQWNFLE9BQU8sQ0FBQyxDQUFDQztZQUNuQixNQUFNQyxPQUFPRCxJQUFJQyxJQUFJO1lBQ3JCLElBQUlBLEtBQUtDLElBQUksRUFBRTtnQkFDWCxNQUFNQyxVQUFVLElBQUlDLEtBQUtILEtBQUtDLElBQUk7Z0JBQ2xDLElBQUksQ0FBQ0csTUFBTUYsUUFBUUcsT0FBTyxLQUFLO29CQUMzQlIsTUFBTVMsSUFBSSxDQUFDSjtnQkFDZjtZQUNKO1FBQ0o7UUFFQSxPQUFPTDtJQUNYLEVBQUUsT0FBT1UsT0FBTztRQUNaZCxRQUFRYyxLQUFLLENBQUMsbUNBQW1DQTtRQUNqRCxPQUFPLEVBQUU7SUFDYjtBQUNKLEVBQUU7QUFFSyxNQUFNQyx5QkFBeUIsZUFBT1AsTUFBTVE7UUFBWUMseUVBQVE7SUFDbkUsSUFBSTtRQUNBLElBQUksQ0FBQ0QsWUFBWTtZQUNiaEIsUUFBUUMsSUFBSSxDQUFDO1lBQ2IsT0FBTztRQUNYO1FBRUEsTUFBTVEsVUFBVSxJQUFJ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bkIsSUFBSW1CLEVBQUU7Z0JBQ1ZqQixNQUFNRCxLQUFLQyxJQUFJO1lBRW5CO1FBQ0o7UUFFQSxPQUFPO1lBQ0hpRSxTQUFTO1lBQ1RGO1FBQ0o7SUFDSixFQUFFLE9BQU96RCxPQUFPO1FBQ1pkLFFBQVFjLEtBQUssQ0FBQyxvQ0FBb0NBO1FBQ2xELE9BQU87WUFDSDJELFNBQVM7WUFDVDNELE9BQU9BLE1BQU02QixPQUFPO1FBQ3hCO0lBQ0o7QUFDSixFQUFFIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEJfU0lSXFxPbmVEcml2ZVxc4LmA4LiU4Liq4LiB4LmM4LiX4LmH4Lit4LibXFxTdW1tYXJ5X29mX1BlcnNvbm5lbF9SYXRpb1xcU3VtbWFyeV9vZl9QZXJzb25uZWxfUmF0aW9cXGFwcFxcY29tcG9uZW50c1xcZm9ybXNcXFdhcmRGb3JtXFxEYXRhRmV0Y2hlcnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBjbGllbnQnO1xyXG5pbXBvcnQgeyBjb2xsZWN0aW9uLCBxdWVyeSwgd2hlcmUsIGdldERvY3MsIG9yZGVyQnksIGxpbWl0IH0gZnJvbSAnZmlyZWJhc2UvZmlyZXN0b3JlJztcclxuaW1wb3J0IHsgZGIgfSBmcm9tICcuLi8uLi8uLi9saWIvZmlyZWJhc2UnO1xyXG5pbXBvcnQgeyBnZXRVVENEYXRlU3RyaW5nIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvZGF0ZVV0aWxzJztcclxuaW1wb3J0IHsgdmFsaWRhdGVQYXJhbXMgfSBmcm9tICcuLi8uLi8uLi91dGlscy9mdW5jdGlvbkhlbHBlcic7XHJcbmltcG9ydCB7IGhhbmRsZUZpcmViYXNlSW5kZXhFcnJvciwgc2FmZVF1ZXJ5IH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvZmlyZWJhc2UtaGVscGVycyc7XHJcblxyXG4vLyBDcmVhdGUgYSBjYWNoZSBmb3Igc3RvcmluZyBmZXRjaGVkIGRhdGFcclxuY29uc3QgZGF0YUNhY2hlID0gbmV3IE1hcCgpO1xyXG5jb25zdCBDQUNIRV9FWFBJUlkgPSA1ICogNjAgKiAxMDAwOyAvLyA1IG1pbnV0ZXNcclxuXHJcbmV4cG9ydCBjb25zdCBmZXRjaERhdGVzV2l0aERhdGEgPSBhc3luYyAoc2VsZWN0ZWRXYXJkKSA9PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGlmICghc2VsZWN0ZWRXYXJkKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignZmV0Y2hEYXRlc1dpdGhEYXRhOiBzZWxlY3RlZFdhcmQgaXMgdW5kZWZpbmVkIG9yIG51bGwnKTtcclxuICAgICAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBjb25zdCBxID0gcXVlcnkoXHJcbiAgICAgICAgICAgIGNvbGxlY3Rpb24oZGIsICd3YXJkRGFpbHlSZWNvcmRzJyksXHJcbiAgICAgICAgICAgIHdoZXJlKCd3YXJkSWQnLCAnPT0nLCBzZWxlY3RlZFdhcmQpXHJcbiAgICAgICAgKTtcclxuICAgICAgICBcclxuICAgICAgICBjb25zdCBxdWVyeVNuYXBzaG90ID0gYXdhaXQgZ2V0RG9jcyhxKTtcclxuICAgICAgICBjb25zdCBkYXRlcyA9IFtdO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHF1ZXJ5U25hcHNob3QuZm9yRWFjaCgoZG9jKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBkb2MuZGF0YSgpO1xyXG4gICAgICAgICAgICBpZiAoZGF0YS5kYXRlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRlT2JqID0gbmV3IERhdGUoZGF0YS5kYXRlKTtcclxuICAgICAgICAgICAgICAgIGlmICghaXNOYU4oZGF0ZU9iai5nZXRUaW1lKCkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0ZXMucHVzaChkYXRlT2JqKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiBkYXRlcztcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgZGF0ZXMgd2l0aCBkYXRhOicsIGVycm9yKTtcclxuICAgICAgICByZXR1cm4gW107XHJcbiAgICB9XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZmV0Y2hQcmV2aW91c1NoaWZ0RGF0YSA9IGFzeW5jIChkYXRlLCB0YXJnZXRXYXJkLCBzaGlmdCA9IG51bGwpID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgaWYgKCF0YXJnZXRXYXJkKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignZmV0Y2hQcmV2aW91c1NoaWZ0RGF0YTogdGFyZ2V0V2FyZCBpcyB1bmRlZmluZWQgb3IgbnVsbCcpO1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc3QgZGF0ZU9iaiA9IG5ldyBEYXRlKGRhdGUpO1xyXG4gICAgICAgIGNvbnN0IGRhdGVTdHJpbmcgPSBnZXRVVENEYXRlU3RyaW5nKGRhdGVPYmopO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIOC4luC5ieC4suC5hOC4oeC5iOC4o+C4sOC4muC4uOC4geC4sCDguJTguLbguIfguILguYnguK3guKHguLnguKXguJfguLjguIHguIHguLDguILguK3guIfguKfguLHguJnguJnguLHguYnguJlcclxuICAgICAgICBsZXQgcSA9IHF1ZXJ5KFxyXG4gICAgICAgICAgICBjb2xsZWN0aW9uKGRiLCAnd2FyZERhaWx5UmVjb3JkcycpLFxyXG4gICAgICAgICAgICB3aGVyZSgnd2FyZElkJywgJz09JywgdGFyZ2V0V2FyZCksXHJcbiAgICAgICAgICAgIHdoZXJlKCdkYXRlJywgJz09JywgZGF0ZVN0cmluZylcclxuICAgICAgICApO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIChzaGlmdCA9PT0gJ+C4lOC4tuC4gScpIHtcclxuICAgICAgICAgICAgLy8g4LiW4LmJ4Liy4LmA4Lib4LmH4LiZ4LiB4Liw4LiU4Li24LiBIOC5g+C4q+C5ieC4lOC4tuC4h+C4guC5ieC4reC4oeC4ueC4peC4geC4sOC5gOC4iuC5ieC4suC4guC4reC4h+C4p+C4seC4meC5gOC4lOC4teC4ouC4p+C4geC4seC4mVxyXG4gICAgICAgICAgICBxID0gcXVlcnkoXHJcbiAgICAgICAgICAgICAgICBjb2xsZWN0aW9uKGRiLCAnd2FyZERhaWx5UmVjb3JkcycpLFxyXG4gICAgICAgICAgICAgICAgd2hlcmUoJ3dhcmRJZCcsICc9PScsIHRhcmdldFdhcmQpLFxyXG4gICAgICAgICAgICAgICAgd2hlcmUoJ2RhdGUnLCAnPT0nLCBkYXRlU3RyaW5nKSxcclxuICAgICAgICAgICAgICAgIHdoZXJlKCdzaGlmdCcsICc9PScsICfguYDguIrguYnguLInKVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoc2hpZnQgPT09ICfguYDguIrguYnguLInKSB7XHJcbiAgICAgICAgICAgIC8vIOC4luC5ieC4suC5gOC4m+C5h+C4meC4geC4sOC5gOC4iuC5ieC4siDguYPguKvguYnguJTguLbguIfguILguYnguK3guKHguLnguKXguIHguLDguJTguLbguIHguILguK3guIfguKfguLHguJnguIHguYjguK3guJnguKvguJnguYnguLJcclxuICAgICAgICAgICAgY29uc3QgeWVzdGVyZGF5ID0gbmV3IERhdGUoZGF0ZU9iaik7XHJcbiAgICAgICAgICAgIHllc3RlcmRheS5zZXREYXRlKHllc3RlcmRheS5nZXREYXRlKCkgLSAxKTtcclxuICAgICAgICAgICAgY29uc3QgeWVzdGVyZGF5U3RyaW5nID0gZ2V0VVRDRGF0ZVN0cmluZyh5ZXN0ZXJkYXkpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgcSA9IHF1ZXJ5KFxyXG4gICAgICAgICAgICAgICAgY29sbGVjdGlvbihkYiwgJ3dhcmREYWlseVJlY29yZHMnKSxcclxuICAgICAgICAgICAgICAgIHdoZXJlKCd3YXJkSWQnLCAnPT0nLCB0YXJnZXRXYXJkKSxcclxuICAgICAgICAgICAgICAgIHdoZXJlKCdkYXRlJywgJz09JywgeWVzdGVyZGF5U3RyaW5nKSxcclxuICAgICAgICAgICAgICAgIHdoZXJlKCdzaGlmdCcsICc9PScsICfguJTguLbguIEnKVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBjb25zdCBxdWVyeVNuYXBzaG90ID0gYXdhaXQgZ2V0RG9jcyhxKTtcclxuICAgICAgICBcclxuICAgICAgICBpZiAocXVlcnlTbmFwc2hvdC5lbXB0eSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKHNoaWZ0KSB7XHJcbiAgICAgICAgICAgIC8vIOC4luC5ieC4suC4o+C4sOC4muC4uOC4geC4sCDguJTguLbguIfguILguYnguK3guKHguLnguKXguYDguInguJ7guLLguLDguIHguLDguJfguLXguYjguJXguYnguK3guIfguIHguLLguKNcclxuICAgICAgICAgICAgY29uc3QgZG9jID0gcXVlcnlTbmFwc2hvdC5kb2NzWzBdO1xyXG4gICAgICAgICAgICBpZiAoZG9jKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gZG9jLmRhdGEoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWQ6IGRvYy5pZCxcclxuICAgICAgICAgICAgICAgICAgICAuLi5kYXRhXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAvLyDguJbguYnguLLguYTguKHguYjguKPguLDguJrguLjguIHguLAg4Lij4Lin4Lia4Lij4Lin4Lih4LiC4LmJ4Lit4Lih4Li54Lil4LiX4Li44LiB4LiB4LiwXHJcbiAgICAgICAgY29uc3Qgc2hpZnRzID0gW107XHJcbiAgICAgICAgcXVlcnlTbmFwc2hvdC5mb3JFYWNoKChkb2MpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgZGF0YSA9IGRvYy5kYXRhKCk7XHJcbiAgICAgICAgICAgIHNoaWZ0cy5wdXNoKHtcclxuICAgICAgICAgICAgICAgIGlkOiBkb2MuaWQsXHJcbiAgICAgICAgICAgICAgICAuLi5kYXRhXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIOC5gOC4o+C4teC4ouC4h+C4peC4s+C4lOC4seC4muC4leC4suC4oeC4geC4sCAo4LmA4LiK4LmJ4LiyLCDguJTguLbguIEpXHJcbiAgICAgICAgc2hpZnRzLnNvcnQoKGEsIGIpID0+IHtcclxuICAgICAgICAgICAgY29uc3Qgb3JkZXIgPSB7ICfguYDguIrguYnguLInOiAxLCAn4LiU4Li24LiBJzogMiB9O1xyXG4gICAgICAgICAgICByZXR1cm4gb3JkZXJbYS5zaGlmdF0gLSBvcmRlcltiLnNoaWZ0XTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4gc2hpZnRzLmxlbmd0aCA+IDAgPyBzaGlmdHMgOiBudWxsO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBwcmV2aW91cyBzaGlmdCBkYXRhOicsIGVycm9yKTtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBmZXRjaEFwcHJvdmFsRGF0YSA9IGFzeW5jIChkYXRlLCB0YXJnZXRXYXJkLCBzaGlmdCA9IG51bGwpID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgaWYgKCF0YXJnZXRXYXJkKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignZmV0Y2hBcHByb3ZhbERhdGE6IHRhcmdldFdhcmQgaXMgdW5kZWZpbmVkIG9yIG51bGwnKTtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IGRhdGVTdHJpbmcgPSBnZXRVVENEYXRlU3RyaW5nKG5ldyBEYXRlKGRhdGUpKTtcclxuICAgICAgICBcclxuICAgICAgICBsZXQgcTtcclxuICAgICAgICBpZiAoc2hpZnQpIHtcclxuICAgICAgICAgICAgLy8g4LiW4LmJ4Liy4Lij4Liw4Lia4Li44LiB4LiwIOC4iOC4sOC4lOC4tuC4h+C4guC5ieC4reC4oeC4ueC4peC5gOC4ieC4nuC4suC4sOC4geC4sOC4meC4seC5ieC4mVxyXG4gICAgICAgICAgICBxID0gcXVlcnkoXHJcbiAgICAgICAgICAgICAgICBjb2xsZWN0aW9uKGRiLCAnd2FyZERhaWx5UmVjb3JkcycpLFxyXG4gICAgICAgICAgICAgICAgd2hlcmUoJ3dhcmRJZCcsICc9PScsIHRhcmdldFdhcmQpLFxyXG4gICAgICAgICAgICAgICAgd2hlcmUoJ2RhdGUnLCAnPT0nLCBkYXRlU3RyaW5nKSxcclxuICAgICAgICAgICAgICAgIHdoZXJlKCdzaGlmdCcsICc9PScsIHNoaWZ0KVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIOC4luC5ieC4suC5hOC4oeC5iOC4o+C4sOC4muC4uOC4geC4sCDguIjguLDguJTguLbguIfguILguYnguK3guKHguLnguKXguJfguLHguYnguIfguKvguKHguJTguILguK3guIfguKfguLHguJnguJnguLHguYnguJlcclxuICAgICAgICAgICAgcSA9IHF1ZXJ5KFxyXG4gICAgICAgICAgICAgICAgY29sbGVjdGlvbihkYiwgJ3dhcmREYWlseVJlY29yZHMnKSxcclxuICAgICAgICAgICAgICAgIHdoZXJlKCd3YXJkSWQnLCAnPT0nLCB0YXJnZXRXYXJkKSxcclxuICAgICAgICAgICAgICAgIHdoZXJlKCdkYXRlJywgJz09JywgZGF0ZVN0cmluZylcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc3QgcXVlcnlTbmFwc2hvdCA9IGF3YWl0IGdldERvY3MocSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKHF1ZXJ5U25hcHNob3QuZW1wdHkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7IC8vIOC5hOC4oeC5iOC4nuC4muC4guC5ieC4reC4oeC4ueC4pVxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAvLyDguJbguYnguLLguKHguLXguIHguLLguKPguKPguLDguJrguLjguIHguLAg4LiI4Liw4LiU4Li24LiH4LiC4LmJ4Lit4Lih4Li54Lil4LmA4LiJ4Lie4Liy4Liw4LiB4Liw4LiZ4Lix4LmJ4LiZXHJcbiAgICAgICAgaWYgKHNoaWZ0KSB7XHJcbiAgICAgICAgICAgIGlmICghcXVlcnlTbmFwc2hvdC5lbXB0eSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZG9jID0gcXVlcnlTbmFwc2hvdC5kb2NzWzBdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IGRvYy5kYXRhKCk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWQ6IGRvYy5pZCxcclxuICAgICAgICAgICAgICAgICAgICByZWNvcmRlZDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICBhcHByb3ZlZDogZGF0YS5pc0FwcHJvdmVkIHx8IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIGFwcHJvdmVkQnk6IGRhdGEuYXBwcm92ZWRCeSxcclxuICAgICAgICAgICAgICAgICAgICBhcHByb3ZlZEF0OiBkYXRhLmFwcHJvdmVkQXQsXHJcbiAgICAgICAgICAgICAgICAgICAgaXNEcmFmdDogZGF0YS5pc0RyYWZ0IHx8IGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAvLyDguJbguYnguLLguYTguKHguYjguKPguLDguJrguLjguIHguLAg4LiI4Liw4Lij4Lin4Lia4Lij4Lin4Lih4LiC4LmJ4Lit4Lih4Li54Lil4LiX4Li44LiB4LiB4LiwXHJcbiAgICAgICAgY29uc3Qgc2hpZnREYXRhID0ge307XHJcbiAgICAgICAgcXVlcnlTbmFwc2hvdC5mb3JFYWNoKChkb2MpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgZGF0YSA9IGRvYy5kYXRhKCk7XHJcbiAgICAgICAgICAgIHNoaWZ0RGF0YVtkYXRhLnNoaWZ0XSA9IHtcclxuICAgICAgICAgICAgICAgIGlkOiBkb2MuaWQsXHJcbiAgICAgICAgICAgICAgICByZWNvcmRlZDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGFwcHJvdmVkOiBkYXRhLmlzQXBwcm92ZWQgfHwgZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBhcHByb3ZlZEJ5OiBkYXRhLmFwcHJvdmVkQnksXHJcbiAgICAgICAgICAgICAgICBhcHByb3ZlZEF0OiBkYXRhLmFwcHJvdmVkQXQsXHJcbiAgICAgICAgICAgICAgICBpc0RyYWZ0OiBkYXRhLmlzRHJhZnQgfHwgZmFsc2VcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4gc2hpZnREYXRhO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBhcHByb3ZhbCBkYXRhOicsIGVycm9yKTtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBjaGVja0FwcHJvdmFsU3RhdHVzID0gYXN5bmMgKGRhdGUsIHRhcmdldFdhcmQsIHNoaWZ0ID0gbnVsbCkgPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBhcHByb3ZhbERhdGEgPSBhd2FpdCBmZXRjaEFwcHJvdmFsRGF0YShkYXRlLCB0YXJnZXRXYXJkLCBzaGlmdCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKCFhcHByb3ZhbERhdGEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiAnbm90X3JlY29yZGVkJywgbWVzc2FnZTogJ+C4ouC4seC4h+C5hOC4oeC5iOC4oeC4teC4geC4suC4o+C4muC4seC4meC4l+C4tuC4geC4guC5ieC4reC4oeC4ueC4pScgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8g4LiW4LmJ4Liy4Lij4Liw4Lia4Li44LiB4LiwXHJcbiAgICAgICAgaWYgKHNoaWZ0KSB7XHJcbiAgICAgICAgICAgIGlmIChhcHByb3ZhbERhdGEuaXNEcmFmdCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiAnZHJhZnQnLCBtZXNzYWdlOiAn4Lit4Lii4Li54LmI4LmD4LiZ4Liq4LiW4Liy4LiZ4Liw4LiJ4Lia4Lix4Lia4Lij4LmI4Liy4LiHJyB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZiAoYXBwcm92YWxEYXRhLmFwcHJvdmVkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4geyBcclxuICAgICAgICAgICAgICAgICAgICBzdGF0dXM6ICdhcHByb3ZlZCcsIFxyXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICfguYTguJTguYnguKPguLHguJrguIHguLLguKPguK3guJnguLjguKHguLHguJXguLTguYHguKXguYnguKcnLFxyXG4gICAgICAgICAgICAgICAgICAgIGFwcHJvdmVkQnk6IGFwcHJvdmFsRGF0YS5hcHByb3ZlZEJ5LFxyXG4gICAgICAgICAgICAgICAgICAgIGFwcHJvdmVkQXQ6IGFwcHJvdmFsRGF0YS5hcHByb3ZlZEF0XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICByZXR1cm4geyBzdGF0dXM6ICdwZW5kaW5nX2FwcHJvdmFsJywgbWVzc2FnZTogJ+C4o+C4reC4geC4suC4o+C4reC4meC4uOC4oeC4seC4leC4tCcgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8g4LiW4LmJ4Liy4LmE4Lih4LmI4Lij4Liw4Lia4Li44LiB4LiwIOC4leC4o+C4p+C4iOC4quC4reC4muC4l+C4uOC4geC4geC4sFxyXG4gICAgICAgIGNvbnN0IGFsbFNoaWZ0cyA9IFsn4LmA4LiK4LmJ4LiyJywgJ+C4lOC4tuC4gSddO1xyXG4gICAgICAgIGNvbnN0IHNoaWZ0U3RhdHVzZXMgPSB7fTtcclxuICAgICAgICBcclxuICAgICAgICBhbGxTaGlmdHMuZm9yRWFjaChzID0+IHtcclxuICAgICAgICAgICAgaWYgKGFwcHJvdmFsRGF0YVtzXSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGFwcHJvdmFsRGF0YVtzXS5pc0RyYWZ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hpZnRTdGF0dXNlc1tzXSA9IHsgc3RhdHVzOiAnZHJhZnQnLCBtZXNzYWdlOiAn4Lit4Lii4Li54LmI4LmD4LiZ4Liq4LiW4Liy4LiZ4Liw4LiJ4Lia4Lix4Lia4Lij4LmI4Liy4LiHJyB9O1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChhcHByb3ZhbERhdGFbc10uYXBwcm92ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBzaGlmdFN0YXR1c2VzW3NdID0geyBcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiAnYXBwcm92ZWQnLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ+C5hOC4lOC5ieC4o+C4seC4muC4geC4suC4o+C4reC4meC4uOC4oeC4seC4leC4tOC5geC4peC5ieC4pycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFwcHJvdmVkQnk6IGFwcHJvdmFsRGF0YVtzXS5hcHByb3ZlZEJ5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcHByb3ZlZEF0OiBhcHByb3ZhbERhdGFbc10uYXBwcm92ZWRBdFxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHNoaWZ0U3RhdHVzZXNbc10gPSB7IHN0YXR1czogJ3BlbmRpbmdfYXBwcm92YWwnLCBtZXNzYWdlOiAn4Lij4Lit4LiB4Liy4Lij4Lit4LiZ4Li44Lih4Lix4LiV4Li0JyB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc2hpZnRTdGF0dXNlc1tzXSA9IHsgc3RhdHVzOiAnbm90X3JlY29yZGVkJywgbWVzc2FnZTogJ+C4ouC4seC4h+C5hOC4oeC5iOC4oeC4teC4geC4suC4o+C4muC4seC4meC4l+C4tuC4geC4guC5ieC4reC4oeC4ueC4pScgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiBzaGlmdFN0YXR1c2VzO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBjaGVja2luZyBhcHByb3ZhbCBzdGF0dXM6JywgZXJyb3IpO1xyXG4gICAgICAgIHJldHVybiB7IHN0YXR1czogJ2Vycm9yJywgbWVzc2FnZTogJ+C5gOC4geC4tOC4lOC4guC5ieC4reC4nOC4tOC4lOC4nuC4peC4suC4lOC5g+C4meC4geC4suC4o+C4leC4o+C4p+C4iOC4quC4reC4muC4quC4luC4suC4meC4sCcgfTtcclxuICAgIH1cclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBmZXRjaExhdGVzdFJlY29yZCA9IGFzeW5jICh0YXJnZXRXYXJkKSA9PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGlmICghdGFyZ2V0V2FyZCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ2ZldGNoTGF0ZXN0UmVjb3JkOiB0YXJnZXRXYXJkIGlzIHVuZGVmaW5lZCBvciBudWxsJyk7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBjb25zdCB3YXJkRGFpbHlSZWYgPSBjb2xsZWN0aW9uKGRiLCAnd2FyZERhaWx5UmVjb3JkcycpO1xyXG4gICAgICAgIGNvbnN0IHEgPSBxdWVyeShcclxuICAgICAgICAgICAgd2FyZERhaWx5UmVmLFxyXG4gICAgICAgICAgICB3aGVyZSgnd2FyZElkJywgJz09JywgdGFyZ2V0V2FyZCksXHJcbiAgICAgICAgICAgIG9yZGVyQnkoJ2RhdGUnLCAnZGVzYycpLFxyXG4gICAgICAgICAgICBsaW1pdCgxKVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc3QgcXVlcnlTbmFwc2hvdCA9IGF3YWl0IGdldERvY3MocSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKHF1ZXJ5U25hcHNob3QuZW1wdHkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IGRvYyA9IHF1ZXJ5U25hcHNob3QuZG9jc1swXTtcclxuICAgICAgICBjb25zdCBkYXRhID0gZG9jLmRhdGEoKTtcclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBpZDogZG9jLmlkLFxyXG4gICAgICAgICAgICAuLi5kYXRhXHJcbiAgICAgICAgfTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgbGF0ZXN0IHJlY29yZDonLCBlcnJvcik7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbn07XHJcblxyXG4vLyBNb2RpZmllZCBmZXRjaFdhcmREYXRhIGZ1bmN0aW9uIHdpdGggY2FjaGluZyBhbmQgaW1wcm92ZWQgZXJyb3IgaGFuZGxpbmdcclxuZXhwb3J0IGNvbnN0IGZldGNoV2FyZERhdGEgPSBhc3luYyAoZGF0ZSwgc2VsZWN0ZWRXYXJkLCBzZWxlY3RlZFNoaWZ0KSA9PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGlmICghZGF0ZSB8fCAhc2VsZWN0ZWRXYXJkIHx8ICFzZWxlY3RlZFNoaWZ0KSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignZmV0Y2hXYXJkRGF0YTogTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXJzJywge1xyXG4gICAgICAgICAgICAgICAgZGF0ZSxcclxuICAgICAgICAgICAgICAgIHNlbGVjdGVkV2FyZCxcclxuICAgICAgICAgICAgICAgIHNlbGVjdGVkU2hpZnRcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAvLyBDcmVhdGUgYSBjYWNoZSBrZXlcclxuICAgICAgICBjb25zdCBjYWNoZUtleSA9IGAke2RhdGV9XyR7c2VsZWN0ZWRXYXJkfV8ke3NlbGVjdGVkU2hpZnR9YDtcclxuICAgICAgICBcclxuICAgICAgICAvLyBDaGVjayBpZiBkYXRhIGlzIGluIGNhY2hlIGFuZCBub3QgZXhwaXJlZFxyXG4gICAgICAgIGNvbnN0IGNhY2hlZERhdGEgPSBkYXRhQ2FjaGUuZ2V0KGNhY2hlS2V5KTtcclxuICAgICAgICBpZiAoY2FjaGVkRGF0YSAmJiAoRGF0ZS5ub3coKSAtIGNhY2hlZERhdGEudGltZXN0YW1wIDwgQ0FDSEVfRVhQSVJZKSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnUmV0dXJuaW5nIGNhY2hlZCBkYXRhIGZvcjonLCBjYWNoZUtleSk7XHJcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWREYXRhLmRhdGE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIElmIG5vdCBpbiBjYWNoZSwgZmV0Y2ggZnJvbSBGaXJlc3RvcmVcclxuICAgICAgICBjb25zdCBkYXRlT2JqID0gbmV3IERhdGUoZGF0ZSk7XHJcbiAgICAgICAgY29uc3QgZGF0ZVN0cmluZyA9IGdldFVUQ0RhdGVTdHJpbmcoZGF0ZU9iaik7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc29sZS5sb2coYEZldGNoaW5nIGRhdGEgZm9yICR7c2VsZWN0ZWRXYXJkfSBvbiAke2RhdGVTdHJpbmd9LCBzaGlmdDogJHtzZWxlY3RlZFNoaWZ0fWApO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IHdhcmREYWlseVJlZiA9IGNvbGxlY3Rpb24oZGIsICd3YXJkRGFpbHlSZWNvcmRzJyk7XHJcbiAgICAgICAgY29uc3QgcSA9IHF1ZXJ5KFxyXG4gICAgICAgICAgICB3YXJkRGFpbHlSZWYsXHJcbiAgICAgICAgICAgIHdoZXJlKCd3YXJkSWQnLCAnPT0nLCBzZWxlY3RlZFdhcmQpLFxyXG4gICAgICAgICAgICB3aGVyZSgnZGF0ZScsICc9PScsIGRhdGVTdHJpbmcpLFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgcXVlcnlTbmFwc2hvdCA9IGF3YWl0IGdldERvY3MocSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZiAocXVlcnlTbmFwc2hvdC5lbXB0eSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYE5vIGRhdGEgZm91bmQgZm9yICR7c2VsZWN0ZWRXYXJkfSBvbiAke2RhdGVTdHJpbmd9YCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgY29uc3Qgd2FyZERhdGEgPSBxdWVyeVNuYXBzaG90LmRvY3NbMF0uZGF0YSgpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYgKCF3YXJkRGF0YS5zaGlmdHMgfHwgIXdhcmREYXRhLnNoaWZ0c1tzZWxlY3RlZFNoaWZ0XSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYE5vIHNoaWZ0IGRhdGEgZm91bmQgZm9yICR7c2VsZWN0ZWRTaGlmdH1gKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBTdG9yZSBpbiBjYWNoZVxyXG4gICAgICAgICAgICBkYXRhQ2FjaGUuc2V0KGNhY2hlS2V5LCB7XHJcbiAgICAgICAgICAgICAgICBkYXRhOiB3YXJkRGF0YS5zaGlmdHNbc2VsZWN0ZWRTaGlmdF0sXHJcbiAgICAgICAgICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KClcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICByZXR1cm4gd2FyZERhdGEuc2hpZnRzW3NlbGVjdGVkU2hpZnRdO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoaXMgaXMgYW4gaW5kZXggZXJyb3IgYW5kIGhhbmRsZSBpdFxyXG4gICAgICAgICAgICBpZiAoaGFuZGxlRmlyZWJhc2VJbmRleEVycm9yKGVycm9yKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7IC8vIFJlLXRocm93IGlmIG5vdCBhbiBpbmRleCBlcnJvciBvciBpZiBoYW5kbGluZyBmYWlsZWRcclxuICAgICAgICB9XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIHdhcmQgZGF0YTonLCBlcnJvcik7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbn07XHJcblxyXG4vLyDguYDguJ7guLTguYjguKHguJ/guLHguIfguIHguYzguIrguLHguJnguJTguLbguIfguILguYnguK3guKHguLnguKXguJvguKPguLDguKfguLHguJXguLRcclxuZXhwb3J0IGNvbnN0IGZldGNoV2FyZEhpc3RvcnkgPSBhc3luYyAod2FyZElkLCBkYXRlLCBzaGlmdCkgPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBpZiAoIXdhcmRJZCB8fCAhZGF0ZSB8fCAhc2hpZnQpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcignZmV0Y2hXYXJkSGlzdG9yeTogTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXJzJywgeyB3YXJkSWQsIGRhdGUsIHNoaWZ0IH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IGRhdGVTdHJpbmcgPSBnZXRVVENEYXRlU3RyaW5nKG5ldyBEYXRlKGRhdGUpKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyDguITguYnguJnguKvguLLguILguYnguK3guKHguLnguKXguJfguLHguYnguIfguKvguKHguJTguJfguLXguYjguJXguKPguIfguIHguLHguJogd2FyZCwg4Lin4Lix4LiZ4LiX4Li14LmILCDguYHguKXguLDguIHguLDguJfguLXguYjguKPguLDguJrguLhcclxuICAgICAgICBjb25zdCBxID0gcXVlcnkoXHJcbiAgICAgICAgICAgIGNvbGxlY3Rpb24oZGIsICd3YXJkRGFpbHlSZWNvcmRzJyksXHJcbiAgICAgICAgICAgIHdoZXJlKCd3YXJkSWQnLCAnPT0nLCB3YXJkSWQpLFxyXG4gICAgICAgICAgICB3aGVyZSgnZGF0ZScsICc9PScsIGRhdGVTdHJpbmcpLFxyXG4gICAgICAgICAgICB3aGVyZSgnc2hpZnQnLCAnPT0nLCBzaGlmdCksXHJcbiAgICAgICAgICAgIG9yZGVyQnkoJ3RpbWVzdGFtcCcsICdkZXNjJylcclxuICAgICAgICApO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IHF1ZXJ5U25hcHNob3QgPSBhd2FpdCBnZXREb2NzKHEpO1xyXG4gICAgICAgIGNvbnN0IGhpc3RvcnkgPSBbXTtcclxuICAgICAgICBcclxuICAgICAgICBpZiAocXVlcnlTbmFwc2hvdC5lbXB0eSkge1xyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHF1ZXJ5U25hcHNob3QuZm9yRWFjaCgoZG9jKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBkb2MuZGF0YSgpO1xyXG4gICAgICAgICAgICBoaXN0b3J5LnB1c2goe1xyXG4gICAgICAgICAgICAgICAgaWQ6IGRvYy5pZCxcclxuICAgICAgICAgICAgICAgIC4uLmRhdGFcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIGhpc3Rvcnk7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIHdhcmQgaGlzdG9yeTonLCBlcnJvcik7XHJcbiAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgfVxyXG59O1xyXG5cclxuLy8g4LmA4Lie4Li04LmI4Lih4Lif4Lix4LiH4LiB4LmM4LiK4Lix4LiZ4LiV4Lij4Lin4LiI4Liq4Lit4Lia4LiC4LmJ4Lit4Lih4Li54Lil4Lii4LmJ4Lit4LiZ4Lir4Lil4Lix4LiHIDMwIOC4p+C4seC4mVxyXG5leHBvcnQgY29uc3QgY2hlY2tQYXN0MzBEYXlzUmVjb3JkcyA9IGFzeW5jICh3YXJkKSA9PiB7XHJcbiAgICAvLyDguYTguKHguYjguKHguLXguIHguLLguKPguJXguKPguKfguIjguKrguK3guJrguILguYnguK3guKHguLnguKUgMzAg4Lin4Lix4LiZ4Lii4LmJ4Lit4LiZ4Lir4Lil4Lix4LiH4LmB4Lil4LmJ4LinXHJcbiAgICByZXR1cm4geyBcclxuICAgICAgICBjYW5Qcm9jZWVkOiB0cnVlLCBcclxuICAgICAgICBub1JlY2VudFJlY29yZHM6IGZhbHNlXHJcbiAgICB9O1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGNoZWNrUGFzdDdEYXlzRGF0YSA9IGFzeW5jICh3YXJkLCBkYXRlKSA9PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IGN1cnJlbnREYXRlID0gbmV3IERhdGUoZGF0ZSk7XHJcbiAgICAgICAgY29uc3Qgc2V2ZW5EYXlzQWdvID0gbmV3IERhdGUoY3VycmVudERhdGUpO1xyXG4gICAgICAgIHNldmVuRGF5c0Fnby5zZXREYXRlKGN1cnJlbnREYXRlLmdldERhdGUoKSAtIDcpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IGZvcm1hdHRlZEN1cnJlbnREYXRlID0gZ2V0VVRDRGF0ZVN0cmluZyhjdXJyZW50RGF0ZSk7XHJcbiAgICAgICAgY29uc3QgZm9ybWF0dGVkU2V2ZW5EYXlzQWdvID0gZ2V0VVRDRGF0ZVN0cmluZyhzZXZlbkRheXNBZ28pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IHdhcmREYWlseVJlZiA9IGNvbGxlY3Rpb24oZGIsICd3YXJkRGFpbHlSZWNvcmRzJyk7XHJcbiAgICAgICAgY29uc3QgcSA9IHF1ZXJ5KFxyXG4gICAgICAgICAgICB3YXJkRGFpbHlSZWYsXHJcbiAgICAgICAgICAgIHdoZXJlKCd3YXJkSWQnLCAnPT0nLCB3YXJkKSxcclxuICAgICAgICAgICAgd2hlcmUoJ2RhdGUnLCAnPj0nLCBmb3JtYXR0ZWRTZXZlbkRheXNBZ28pLFxyXG4gICAgICAgICAgICB3aGVyZSgnZGF0ZScsICc8PScsIGZvcm1hdHRlZEN1cnJlbnREYXRlKVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc3QgcXVlcnlTbmFwc2hvdCA9IGF3YWl0IGdldERvY3MocSk7XHJcbiAgICAgICAgY29uc3QgcmVjb3JkcyA9IHF1ZXJ5U25hcHNob3QuZG9jcy5tYXAoZG9jID0+IHtcclxuICAgICAgICAgICAgY29uc3QgZGF0YSA9IGRvYy5kYXRhKCk7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBpZDogZG9jLmlkLFxyXG4gICAgICAgICAgICAgICAgZGF0ZTogZGF0YS5kYXRlLFxyXG4gICAgICAgICAgICAgICAgLy8gSW5jbHVkZSBvdGhlciBmaWVsZHMgYXMgbmVlZGVkXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgc3VjY2VzczogdHJ1ZSxcclxuICAgICAgICAgICAgcmVjb3Jkc1xyXG4gICAgICAgIH07XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGNoZWNraW5nIHBhc3QgNyBkYXlzIGRhdGE6JywgZXJyb3IpO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgICAgICAgICBlcnJvcjogZXJyb3IubWVzc2FnZVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn07Il0sIm5hbWVzIjpbImNvbGxlY3Rpb24iLCJxdWVyeSIsIndoZXJlIiwiZ2V0RG9jcyIsIm9yZGVyQnkiLCJsaW1pdCIsImRiIiwiZ2V0VVRDRGF0ZVN0cmluZyIsInZhbGlkYXRlUGFyYW1zIiwiaGFuZGxlRmlyZWJhc2VJbmRleEVycm9yIiwic2FmZVF1ZXJ5IiwiZGF0YUNhY2hlIiwiTWFwIiwiQ0FDSEVfRVhQSVJZIiwiZmV0Y2hEYXRlc1dpdGhEYXRhIiwic2VsZWN0ZWRXYXJkIiwiY29uc29sZSIsIndhcm4iLCJxIiwicXVlcnlTbmFwc2hvdCIsImRhdGVzIiwiZm9yRWFjaCIsImRvYyIsImRhdGEiLCJkYXRlIiwiZGF0ZU9iaiIsIkRhdGUiLCJpc05hTiIsImdldFRpbWUiLCJwdXNoIiwiZXJyb3IiLCJmZXRjaFByZXZpb3VzU2hpZnREYXRhIiwidGFyZ2V0V2FyZCIsInNoaWZ0IiwiZGF0ZVN0cmluZyIsInllc3RlcmRheSIsInNldERhdGUiLCJnZXREYXRlIiwieWVzdGVyZGF5U3RyaW5nIiwiZW1wdHkiLCJkb2NzIiwiaWQiLCJzaGlmdHMiLCJzb3J0IiwiYSIsImIiLCJvcmRlciIsImxlbmd0aCIsImZldGNoQXBwcm92YWxEYXRhIiwicmVjb3JkZWQiLCJhcHByb3ZlZCIsImlzQXBwcm92ZWQiLCJhcHByb3ZlZEJ5IiwiYXBwcm92ZWRBdCIsImlzRHJhZnQiLCJzaGlmdERhdGEiLCJjaGVja0FwcHJvdmFsU3RhdHVzIiwiYXBwcm92YWxEYXRhIiwic3RhdHVzIiwibWVzc2FnZSIsImFsbFNoaWZ0cyIsInNoaWZ0U3RhdHVzZXMiLCJzIiwiZmV0Y2hMYXRlc3RSZWNvcmQiLCJ3YXJkRGFpbHlSZWYiLCJmZXRjaFdhcmREYXRhIiwic2VsZWN0ZWRTaGlmdCIsImNhY2hlS2V5IiwiY2FjaGVkRGF0YSIsImdldCIsIm5vdyIsInRpbWVzdGFtcCIsImxvZyIsIndhcmREYXRhIiwic2V0IiwiZmV0Y2hXYXJkSGlzdG9yeSIsIndhcmRJZCIsImhpc3RvcnkiLCJjaGVja1Bhc3QzMERheXNSZWNvcmRzIiwid2FyZCIsImNhblByb2NlZWQiLCJub1JlY2VudFJlY29yZHMiLCJjaGVja1Bhc3Q3RGF5c0RhdGEiLCJjdXJyZW50RGF0ZSIsInNldmVuRGF5c0FnbyIsImZvcm1hdHRlZEN1cnJlbnREYXRlIiwiZm9ybWF0dGVkU2V2ZW5EYXlzQWdvIiwicmVjb3JkcyIsIm1hcCIsInN1Y2Nlc3MiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/components/forms/WardForm/DataFetchers.js\n"));

/***/ })

});