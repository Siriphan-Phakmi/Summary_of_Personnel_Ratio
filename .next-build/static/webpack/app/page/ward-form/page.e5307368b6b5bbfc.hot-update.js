"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page/ward-form/page",{

/***/ "(app-pages-browser)/./app/components/forms/WardForm/DataFetchers.js":
/*!*******************************************************!*\
  !*** ./app/components/forms/WardForm/DataFetchers.js ***!
  \*******************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculatePatientCensus: () => (/* binding */ calculatePatientCensus),\n/* harmony export */   checkApprovalStatus: () => (/* binding */ checkApprovalStatus),\n/* harmony export */   checkMorningShiftDataExists: () => (/* binding */ checkMorningShiftDataExists),\n/* harmony export */   checkPast30DaysRecords: () => (/* binding */ checkPast30DaysRecords),\n/* harmony export */   checkPast7DaysData: () => (/* binding */ checkPast7DaysData),\n/* harmony export */   fetchApprovalData: () => (/* binding */ fetchApprovalData),\n/* harmony export */   fetchDatesWithData: () => (/* binding */ fetchDatesWithData),\n/* harmony export */   fetchLast7DaysData: () => (/* binding */ fetchLast7DaysData),\n/* harmony export */   fetchLatestRecord: () => (/* binding */ fetchLatestRecord),\n/* harmony export */   fetchPreviousShiftData: () => (/* binding */ fetchPreviousShiftData),\n/* harmony export */   fetchWardData: () => (/* binding */ fetchWardData),\n/* harmony export */   fetchWardHistory: () => (/* binding */ fetchWardHistory),\n/* harmony export */   safeFetchWardData: () => (/* binding */ safeFetchWardData)\n/* harmony export */ });\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! firebase/firestore */ \"(app-pages-browser)/./node_modules/firebase/firestore/dist/esm/index.esm.js\");\n/* harmony import */ var _lib_firebase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../lib/firebase */ \"(app-pages-browser)/./app/lib/firebase.js\");\n/* harmony import */ var _utils_dateUtils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../utils/dateUtils */ \"(app-pages-browser)/./app/utils/dateUtils.js\");\n/* harmony import */ var _utils_functionHelper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../utils/functionHelper */ \"(app-pages-browser)/./app/utils/functionHelper.js\");\n/* harmony import */ var _utils_firebase_helpers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../utils/firebase-helpers */ \"(app-pages-browser)/./app/utils/firebase-helpers.js\");\n/* __next_internal_client_entry_do_not_use__ fetchDatesWithData,fetchPreviousShiftData,fetchApprovalData,checkApprovalStatus,fetchLatestRecord,fetchWardData,fetchWardHistory,checkPast30DaysRecords,checkPast7DaysData,checkMorningShiftDataExists,safeFetchWardData,calculatePatientCensus,fetchLast7DaysData auto */ \n\n\n\n\n// Create a cache for storing fetched data\nconst dataCache = new Map();\n// ปรับปรุงเวลาหมดอายุของแคชให้สั้นลง เพื่อให้ข้อมูลอัพเดทบ่อยขึ้น\nconst DATA_CACHE_EXPIRY = 1 * 60 * 1000; // 1 minute\nconst fetchDatesWithData = async (selectedWard)=>{\n    try {\n        if (!selectedWard) {\n            console.warn('fetchDatesWithData: selectedWard is undefined or null');\n            return [];\n        }\n        const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_lib_firebase__WEBPACK_IMPORTED_MODULE_1__.db, 'wardDailyRecords'), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('wardId', '==', selectedWard));\n        const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(q);\n        const dates = [];\n        querySnapshot.forEach((doc)=>{\n            const data = doc.data();\n            if (data.date) {\n                const dateObj = new Date(data.date);\n                if (!isNaN(dateObj.getTime())) {\n                    dates.push(dateObj);\n                }\n            }\n        });\n        return dates;\n    } catch (error) {\n        console.error('Error fetching dates with data:', error);\n        return [];\n    }\n};\nconst fetchPreviousShiftData = async function(date, targetWard) {\n    let shift = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;\n    try {\n        if (!targetWard) {\n            console.warn('fetchPreviousShiftData: targetWard is undefined or null');\n            return null;\n        }\n        const dateObj = new Date(date);\n        const dateString = (0,_utils_dateUtils__WEBPACK_IMPORTED_MODULE_2__.getUTCDateString)(dateObj);\n        // ถ้าไม่ระบุกะ ดึงข้อมูลทุกกะของวันนั้น\n        let q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_lib_firebase__WEBPACK_IMPORTED_MODULE_1__.db, 'wardDailyRecords'), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('wardId', '==', targetWard), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('date', '==', dateString));\n        if (shift === 'ดึก') {\n            // ถ้าเป็นกะดึก ให้ดึงข้อมูลกะเช้าของวันเดียวกัน\n            q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_lib_firebase__WEBPACK_IMPORTED_MODULE_1__.db, 'wardDailyRecords'), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('wardId', '==', targetWard), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('date', '==', dateString), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('shift', '==', 'เช้า'));\n        } else if (shift === 'เช้า') {\n            // ถ้าเป็นกะเช้า ให้ดึงข้อมูลกะดึกของวันก่อนหน้า\n            const yesterday = new Date(dateObj);\n            yesterday.setDate(yesterday.getDate() - 1);\n            const yesterdayString = (0,_utils_dateUtils__WEBPACK_IMPORTED_MODULE_2__.getUTCDateString)(yesterday);\n            q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_lib_firebase__WEBPACK_IMPORTED_MODULE_1__.db, 'wardDailyRecords'), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('wardId', '==', targetWard), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('date', '==', yesterdayString), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('shift', '==', 'ดึก'));\n        }\n        const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(q);\n        if (querySnapshot.empty) {\n            return null;\n        }\n        if (shift) {\n            // ถ้าระบุกะ ดึงข้อมูลเฉพาะกะที่ต้องการ\n            const doc = querySnapshot.docs[0];\n            if (doc) {\n                const data = doc.data();\n                return {\n                    id: doc.id,\n                    ...data\n                };\n            }\n            return null;\n        }\n        // ถ้าไม่ระบุกะ รวบรวมข้อมูลทุกกะ\n        const shifts = [];\n        querySnapshot.forEach((doc)=>{\n            const data = doc.data();\n            shifts.push({\n                id: doc.id,\n                ...data\n            });\n        });\n        // เรียงลำดับตามกะ (เช้า, ดึก)\n        shifts.sort((a, b)=>{\n            const order = {\n                'เช้า': 1,\n                'ดึก': 2\n            };\n            return order[a.shift] - order[b.shift];\n        });\n        return shifts.length > 0 ? shifts : null;\n    } catch (error) {\n        console.error('Error fetching previous shift data:', error);\n        return null;\n    }\n};\nconst fetchApprovalData = async function(date, targetWard) {\n    let shift = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;\n    try {\n        if (!targetWard) {\n            console.warn('fetchApprovalData: targetWard is undefined or null');\n            return null;\n        }\n        const dateString = (0,_utils_dateUtils__WEBPACK_IMPORTED_MODULE_2__.getUTCDateString)(new Date(date));\n        let q;\n        if (shift) {\n            // ถ้าระบุกะ จะดึงข้อมูลเฉพาะกะนั้น\n            q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_lib_firebase__WEBPACK_IMPORTED_MODULE_1__.db, 'wardDailyRecords'), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('wardId', '==', targetWard), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('date', '==', dateString), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('shift', '==', shift));\n        } else {\n            // ถ้าไม่ระบุกะ จะดึงข้อมูลทั้งหมดของวันนั้น\n            q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_lib_firebase__WEBPACK_IMPORTED_MODULE_1__.db, 'wardDailyRecords'), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('wardId', '==', targetWard), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('date', '==', dateString));\n        }\n        const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(q);\n        if (querySnapshot.empty) {\n            return null; // ไม่พบข้อมูล\n        }\n        // ถ้ามีการระบุกะ จะดึงข้อมูลเฉพาะกะนั้น\n        if (shift) {\n            if (!querySnapshot.empty) {\n                const doc = querySnapshot.docs[0];\n                const data = doc.data();\n                return {\n                    id: doc.id,\n                    recorded: true,\n                    approved: data.isApproved || false,\n                    approvedBy: data.approvedBy,\n                    approvedAt: data.approvedAt,\n                    isDraft: data.isDraft || false\n                };\n            }\n            return null;\n        }\n        // ถ้าไม่ระบุกะ จะรวบรวมข้อมูลทุกกะ\n        const shiftData = {};\n        querySnapshot.forEach((doc)=>{\n            const data = doc.data();\n            shiftData[data.shift] = {\n                id: doc.id,\n                recorded: true,\n                approved: data.isApproved || false,\n                approvedBy: data.approvedBy,\n                approvedAt: data.approvedAt,\n                isDraft: data.isDraft || false\n            };\n        });\n        return shiftData;\n    } catch (error) {\n        console.error('Error fetching approval data:', error);\n        return null;\n    }\n};\nconst checkApprovalStatus = async function(date, targetWard) {\n    let shift = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;\n    try {\n        const approvalData = await fetchApprovalData(date, targetWard, shift);\n        if (!approvalData) {\n            return {\n                status: 'not_recorded',\n                message: 'ยังไม่มีการบันทึกข้อมูล'\n            };\n        }\n        // ถ้าระบุกะ\n        if (shift) {\n            if (approvalData.isDraft) {\n                return {\n                    status: 'draft',\n                    message: 'อยู่ในสถานะฉบับร่าง'\n                };\n            }\n            if (approvalData.approved) {\n                return {\n                    status: 'approved',\n                    message: 'ได้รับการอนุมัติแล้ว',\n                    approvedBy: approvalData.approvedBy,\n                    approvedAt: approvalData.approvedAt\n                };\n            }\n            return {\n                status: 'pending_approval',\n                message: 'รอการอนุมัติ'\n            };\n        }\n        // ถ้าไม่ระบุกะ ตรวจสอบทุกกะ\n        const allShifts = [\n            'เช้า',\n            'ดึก'\n        ];\n        const shiftStatuses = {};\n        allShifts.forEach((s)=>{\n            if (approvalData[s]) {\n                if (approvalData[s].isDraft) {\n                    shiftStatuses[s] = {\n                        status: 'draft',\n                        message: 'อยู่ในสถานะฉบับร่าง'\n                    };\n                } else if (approvalData[s].approved) {\n                    shiftStatuses[s] = {\n                        status: 'approved',\n                        message: 'ได้รับการอนุมัติแล้ว',\n                        approvedBy: approvalData[s].approvedBy,\n                        approvedAt: approvalData[s].approvedAt\n                    };\n                } else {\n                    shiftStatuses[s] = {\n                        status: 'pending_approval',\n                        message: 'รอการอนุมัติ'\n                    };\n                }\n            } else {\n                shiftStatuses[s] = {\n                    status: 'not_recorded',\n                    message: 'ยังไม่มีการบันทึกข้อมูล'\n                };\n            }\n        });\n        return shiftStatuses;\n    } catch (error) {\n        console.error('Error checking approval status:', error);\n        return {\n            status: 'error',\n            message: 'เกิดข้อผิดพลาดในการตรวจสอบสถานะ'\n        };\n    }\n};\nconst fetchLatestRecord = async (targetWard)=>{\n    try {\n        if (!targetWard) {\n            console.warn('fetchLatestRecord: targetWard is undefined or null');\n            return null;\n        }\n        const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_lib_firebase__WEBPACK_IMPORTED_MODULE_1__.db, 'wardDailyRecords'), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('wardId', '==', targetWard), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.orderBy)('date', 'desc'), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.limit)(1));\n        const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(q);\n        if (querySnapshot.empty) {\n            return null;\n        }\n        const latestRecord = querySnapshot.docs[0].data();\n        return new Date(latestRecord.date);\n    } catch (error) {\n        console.error('Error fetching latest record:', error);\n        return null;\n    }\n};\nconst fetchWardData = async (date, selectedWard, selectedShift)=>{\n    console.log('fetchWardData called with:', {\n        date,\n        selectedWard,\n        selectedShift\n    });\n    try {\n        // ถ้าไม่มีพารามิเตอร์ที่จำเป็น ให้ return null ทันที\n        if (!date || !selectedWard || !selectedShift) {\n            console.warn('fetchWardData: Missing required parameters', {\n                date,\n                selectedWard,\n                selectedShift\n            });\n            return null;\n        }\n        // แปลงวันที่เป็น string format\n        const dateObj = new Date(date);\n        const dateString = (0,_utils_dateUtils__WEBPACK_IMPORTED_MODULE_2__.getUTCDateString)(dateObj);\n        // สร้าง cache key\n        const cacheKey = \"\".concat(dateString, \"_\").concat(selectedWard, \"_\").concat(selectedShift);\n        // ตรวจสอบว่าข้อมูลอยู่ในแคชและยังไม่หมดอายุหรือไม่\n        const cachedData = dataCache.get(cacheKey);\n        if (cachedData && Date.now() - cachedData.timestamp < DATA_CACHE_EXPIRY) {\n            console.log('Returning cached data for:', cacheKey);\n            return cachedData.data;\n        }\n        console.log('Fetching ward data from Firestore:', {\n            dateString,\n            selectedWard,\n            selectedShift\n        });\n        try {\n            // สร้าง query\n            const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_lib_firebase__WEBPACK_IMPORTED_MODULE_1__.db, 'wardDailyRecords'), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('date', '==', dateString), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('wardId', '==', selectedWard), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('shift', '==', selectedShift));\n            // ดึงข้อมูลตาม query\n            const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(q);\n            // ถ้าไม่พบข้อมูล\n            if (querySnapshot.empty) {\n                console.log(\"No data found for \".concat(selectedWard, \" on \").concat(dateString, \", shift: \").concat(selectedShift));\n                return null;\n            }\n            // ดึงข้อมูลจาก snapshot\n            const doc = querySnapshot.docs[0];\n            const wardData = doc.data();\n            // สร้างข้อมูลที่จะ return\n            const returnData = {\n                id: doc.id,\n                patientCensus: wardData.patientCensus || '',\n                overallData: wardData.overallData || '',\n                newAdmit: wardData.newAdmit || '',\n                transferIn: wardData.transferIn || '',\n                referIn: wardData.referIn || '',\n                transferOut: wardData.transferOut || '',\n                referOut: wardData.referOut || '',\n                discharge: wardData.discharge || '',\n                dead: wardData.dead || '',\n                rns: wardData.rns || '',\n                pns: wardData.pns || '',\n                nas: wardData.nas || '',\n                aides: wardData.aides || '',\n                studentNurses: wardData.studentNurses || '',\n                notes: wardData.notes || '',\n                date: wardData.date,\n                shift: wardData.shift,\n                wardId: wardData.wardId,\n                isApproved: wardData.isApproved || false,\n                approvedBy: wardData.approvedBy || null,\n                approvalDate: wardData.approvalDate || null,\n                firstName: wardData.firstName || '',\n                lastName: wardData.lastName || '',\n                isDraft: wardData.isDraft || false\n            };\n            // เก็บข้อมูลในแคช\n            dataCache.set(cacheKey, {\n                data: returnData,\n                timestamp: Date.now()\n            });\n            return returnData;\n        } catch (error) {\n            // ตรวจสอบว่าเป็น index error หรือไม่\n            if (error.code === 'failed-precondition' && error.message && error.message.includes('index')) {\n                // ลอง query อีกครั้งโดยไม่ใช้ index\n                console.warn('Index error encountered, trying alternative query...');\n                try {\n                    return await safeFetchWardData(dateString, selectedWard, selectedShift);\n                } catch (fallbackError) {\n                    console.error('Fallback query also failed:', fallbackError);\n                    return null;\n                }\n            }\n            // ถ้าไม่ใช่ index error ให้โยน error ต่อ\n            throw error;\n        }\n    } catch (error) {\n        console.error('Error fetching ward data:', error);\n        return null;\n    }\n};\n// เพิ่มฟังก์ชันดึงข้อมูลประวัติ\nconst fetchWardHistory = async (wardId, date, shift)=>{\n    try {\n        if (!wardId || !date || !shift) {\n            console.error('fetchWardHistory: Missing required parameters', {\n                wardId,\n                date,\n                shift\n            });\n            return [];\n        }\n        const dateObj = new Date(date);\n        const dateString = (0,_utils_dateUtils__WEBPACK_IMPORTED_MODULE_2__.getUTCDateString)(dateObj);\n        const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_lib_firebase__WEBPACK_IMPORTED_MODULE_1__.db, 'wardHistoryLogs'), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('wardId', '==', wardId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('date', '==', dateString), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('shift', '==', shift), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.orderBy)('timestamp', 'desc'));\n        const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(q);\n        if (querySnapshot.empty) {\n            return [];\n        }\n        const history = [];\n        querySnapshot.forEach((doc)=>{\n            const data = doc.data();\n            history.push({\n                id: doc.id,\n                ...data\n            });\n        });\n        return history;\n    } catch (error) {\n        console.error('Error fetching ward history:', error);\n        return [];\n    }\n};\nconst checkPast30DaysRecords = async (ward)=>{\n// Logic implementation here\n};\nconst checkPast7DaysData = async (ward, date)=>{\n// Logic implementation here\n};\n// เพิ่มฟังก์ชัน checkMorningShiftDataExists\nconst checkMorningShiftDataExists = async (date, wardId)=>{\n    try {\n        if (!date || !wardId) {\n            console.error('checkMorningShiftDataExists: Missing required parameters', {\n                date,\n                wardId\n            });\n            return false;\n        }\n        const dateObj = new Date(date);\n        const dateString = (0,_utils_dateUtils__WEBPACK_IMPORTED_MODULE_2__.getUTCDateString)(dateObj);\n        // ตรวจสอบว่ามีข้อมูลกะเช้าหรือไม่\n        const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_lib_firebase__WEBPACK_IMPORTED_MODULE_1__.db, 'wardDailyRecords'), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('wardId', '==', wardId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('date', '==', dateString), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('shift', '==', 'เช้า'));\n        const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(q);\n        return !querySnapshot.empty;\n    } catch (error) {\n        console.error('Error checking morning shift data:', error);\n        return false;\n    }\n};\nconst safeFetchWardData = async (dateString, wardId, shift)=>{\n    try {\n        // ดึงข้อมูลทั้งหมดของ ward\n        const allRecordsQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_lib_firebase__WEBPACK_IMPORTED_MODULE_1__.db, 'wardDailyRecords'), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('wardId', '==', wardId));\n        const allRecordsSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(allRecordsQuery);\n        if (allRecordsSnapshot.empty) {\n            return null;\n        }\n        // กรองเฉพาะข้อมูลที่ตรงกับวันที่และกะที่ต้องการ\n        let matchingRecord = null;\n        allRecordsSnapshot.forEach((doc)=>{\n            const data = doc.data();\n            if (data.date === dateString && data.shift === shift) {\n                matchingRecord = {\n                    id: doc.id,\n                    ...data\n                };\n            }\n        });\n        if (!matchingRecord) {\n            return null;\n        }\n        // สร้างข้อมูลที่จะ return\n        return {\n            id: matchingRecord.id,\n            patientCensus: matchingRecord.patientCensus || '',\n            overallData: matchingRecord.overallData || '',\n            newAdmit: matchingRecord.newAdmit || '',\n            transferIn: matchingRecord.transferIn || '',\n            referIn: matchingRecord.referIn || '',\n            transferOut: matchingRecord.transferOut || '',\n            referOut: matchingRecord.referOut || '',\n            discharge: matchingRecord.discharge || '',\n            dead: matchingRecord.dead || '',\n            rns: matchingRecord.rns || '',\n            pns: matchingRecord.pns || '',\n            nas: matchingRecord.nas || '',\n            aides: matchingRecord.aides || '',\n            studentNurses: matchingRecord.studentNurses || '',\n            notes: matchingRecord.notes || '',\n            date: matchingRecord.date,\n            shift: matchingRecord.shift,\n            wardId: matchingRecord.wardId,\n            isApproved: matchingRecord.isApproved || false,\n            approvedBy: matchingRecord.approvedBy || null,\n            approvalDate: matchingRecord.approvalDate || null,\n            firstName: matchingRecord.firstName || '',\n            lastName: matchingRecord.lastName || '',\n            isDraft: matchingRecord.isDraft || false\n        };\n    } catch (error) {\n        console.error('Error in safeFetchWardData:', error);\n        return null;\n    }\n};\n// เพิ่มฟังก์ชันคำนวณค่าอัตโนมัติ\nconst calculatePatientCensus = (data)=>{\n    if (!data) return '0';\n    const newAdmit = parseInt(data.newAdmit || '0');\n    const transferIn = parseInt(data.transferIn || '0');\n    const referIn = parseInt(data.referIn || '0');\n    const transferOut = parseInt(data.transferOut || '0');\n    const referOut = parseInt(data.referOut || '0');\n    const discharge = parseInt(data.discharge || '0');\n    const dead = parseInt(data.dead || '0');\n    return String(newAdmit + transferIn + referIn - (transferOut + referOut + discharge + dead));\n};\n// เพิ่มฟังก์ชันดึงข้อมูล 7 วันย้อนหลัง\nconst fetchLast7DaysData = async (ward)=>{\n    try {\n        if (!ward) return null;\n        console.log('Fetching data for ward:', ward);\n        // ดึงข้อมูลทั้งหมดของวอร์ดนี้\n        const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_lib_firebase__WEBPACK_IMPORTED_MODULE_1__.db, 'wardDailyRecords'), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('wardId', '==', ward));\n        const snapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(q);\n        if (snapshot.empty) {\n            console.log('No data found for ward:', ward);\n            return null;\n        }\n        // คำนวณวันที่ย้อนหลัง 7 วัน\n        const sevenDaysAgo = new Date();\n        sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);\n        const sevenDaysAgoString = (0,_utils_dateUtils__WEBPACK_IMPORTED_MODULE_2__.getUTCDateString)(sevenDaysAgo);\n        console.log('Searching for data since:', sevenDaysAgoString);\n        // กรองและเรียงลำดับข้อมูลด้วย JavaScript\n        const results = [];\n        snapshot.forEach((doc)=>{\n            const data = doc.data();\n            if (data.date && data.date >= sevenDaysAgoString) {\n                results.push({\n                    id: doc.id,\n                    ...data\n                });\n            }\n        });\n        // เรียงลำดับตามวันที่จากใหม่ไปเก่า\n        results.sort((a, b)=>{\n            // เรียงตามวันที่ก่อน\n            const dateCompare = b.date.localeCompare(a.date);\n            if (dateCompare !== 0) return dateCompare;\n            // ถ้าวันที่เท่ากัน ให้กะดึกมาก่อนกะเช้า\n            const shiftOrder = {\n                'ดึก': 0,\n                'เช้า': 1,\n                '19:00-07:00': 0,\n                '07:00-19:00': 1\n            };\n            return shiftOrder[a.shift] - shiftOrder[b.shift];\n        });\n        console.log('Found results:', results.length > 0 ? results[0] : 'None');\n        return results.length > 0 ? results[0] : null;\n    } catch (error) {\n        console.error('Error fetching last 7 days data:', error);\n        return null;\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/components/forms/WardForm/DataFetchers.js\n"));

/***/ })

});