"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("_app-pages-browser_app_context_AuthContext_js",{

/***/ "(app-pages-browser)/./app/lib/dataAccess.js":
/*!*******************************!*\
  !*** ./app/lib/dataAccess.js ***!
  \*******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addUser: () => (/* binding */ addUser),\n/* harmony export */   checkActiveSession: () => (/* binding */ checkActiveSession),\n/* harmony export */   checkLast7DaysData: () => (/* binding */ checkLast7DaysData),\n/* harmony export */   createUserSession: () => (/* binding */ createUserSession),\n/* harmony export */   deleteUser: () => (/* binding */ deleteUser),\n/* harmony export */   deleteWardDataDraft: () => (/* binding */ deleteWardDataDraft),\n/* harmony export */   findUserByUsername: () => (/* binding */ findUserByUsername),\n/* harmony export */   getAllUsers: () => (/* binding */ getAllUsers),\n/* harmony export */   getLatestDraft: () => (/* binding */ getLatestDraft),\n/* harmony export */   getStaffRecords: () => (/* binding */ getStaffRecords),\n/* harmony export */   getUserDrafts: () => (/* binding */ getUserDrafts),\n/* harmony export */   getWardDailyRecords: () => (/* binding */ getWardDailyRecords),\n/* harmony export */   invalidateSession: () => (/* binding */ invalidateSession),\n/* harmony export */   loginUser: () => (/* binding */ loginUser),\n/* harmony export */   saveStaffRecord: () => (/* binding */ saveStaffRecord),\n/* harmony export */   saveWardDailyRecord: () => (/* binding */ saveWardDailyRecord),\n/* harmony export */   saveWardDataDraft: () => (/* binding */ saveWardDataDraft),\n/* harmony export */   updateAllUsersNameFields: () => (/* binding */ updateAllUsersNameFields),\n/* harmony export */   updateUser: () => (/* binding */ updateUser),\n/* harmony export */   validateSession: () => (/* binding */ validateSession)\n/* harmony export */ });\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! firebase/firestore */ \"(app-pages-browser)/./node_modules/firebase/firestore/dist/esm/index.esm.js\");\n/* harmony import */ var _firebase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./firebase */ \"(app-pages-browser)/./app/lib/firebase.js\");\n/* __next_internal_client_entry_do_not_use__ findUserByUsername,loginUser,getWardDailyRecords,getStaffRecords,saveStaffRecord,saveWardDailyRecord,getAllUsers,addUser,updateUser,deleteUser,updateAllUsersNameFields,checkActiveSession,invalidateSession,createUserSession,validateSession,checkLast7DaysData,saveWardDataDraft,getUserDrafts,deleteWardDataDraft,getLatestDraft auto */ \n\n// สถานะการใช้งานโหมดจำลองข้อมูล\nlet useMockData = false; // ใช้ Firebase โดยตรง\n// รีเซ็ตค่าใน localStorage เพื่อให้แน่ใจว่าใช้ค่า false\nif (true) {\n    localStorage.removeItem('useMockData');\n    localStorage.setItem('useMockData', 'false');\n}\n/**\n * ฟังก์ชันค้นหาผู้ใช้ตาม username\n */ const findUserByUsername = async (username)=>{\n    try {\n        const usersRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, 'users');\n        const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)(usersRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('username', '==', username));\n        const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(q);\n        if (querySnapshot.empty) {\n            return null;\n        }\n        const userDoc = querySnapshot.docs[0];\n        return {\n            id: userDoc.id,\n            ...userDoc.data()\n        };\n    } catch (error) {\n        console.error('Error finding user:', error.message);\n        throw error;\n    }\n};\n/**\n * ฟังก์ชันเข้าสู่ระบบ\n */ const loginUser = async (username, password)=>{\n    try {\n        const usersRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, 'users');\n        const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)(usersRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('username', '==', username));\n        const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(q);\n        if (querySnapshot.empty) {\n            console.log(\"User not found in database:\", username);\n            return {\n                success: false,\n                error: 'User not found'\n            };\n        }\n        const userDoc = querySnapshot.docs[0].data();\n        const userId = querySnapshot.docs[0].id;\n        console.log(\"Found user:\", username, \"Checking password...\");\n        if (userDoc.password !== password) {\n            console.log(\"Invalid password for user:\", username);\n            return {\n                success: false,\n                error: 'Invalid password'\n            };\n        }\n        console.log(\"Login successful for user:\", username);\n        // ตรวจสอบว่าผู้ใช้มี active session อยู่หรือไม่\n        const existingSession = await checkActiveSession(userId);\n        if (existingSession) {\n            // ถ้ามี session อยู่แล้ว ให้ทำการยกเลิก session เก่า\n            await invalidateSession(existingSession.id);\n        }\n        // สร้าง session ใหม่\n        const sessionId = await createUserSession(userId, username);\n        return {\n            success: true,\n            user: {\n                uid: userId,\n                sessionId: sessionId,\n                ...userDoc\n            }\n        };\n    } catch (error) {\n        console.error('Login error:', error.message);\n        return {\n            success: false,\n            error: 'Login failed: ' + error.message\n        };\n    }\n};\n/**\n * ฟังก์ชันดึงข้อมูล ward daily records\n */ const getWardDailyRecords = async function(date) {\n    let wardId = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;\n    try {\n        const wardDailyRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, 'wardDailyRecords');\n        let q;\n        if (wardId) {\n            q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)(wardDailyRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('date', '==', date), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('wardId', '==', wardId));\n        } else {\n            q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)(wardDailyRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('date', '==', date));\n        }\n        const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(q);\n        return querySnapshot.docs.map((doc)=>({\n                id: doc.id,\n                ...doc.data()\n            }));\n    } catch (error) {\n        console.error('Error getting ward records:', error.message);\n        return [];\n    }\n};\n/**\n * ฟังก์ชันดึงข้อมูล staff records\n */ const getStaffRecords = async function(date) {\n    let shift = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;\n    try {\n        const recordsRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, 'staffRecords');\n        let q;\n        if (shift) {\n            q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)(recordsRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('date', '==', date), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('shift', '==', shift));\n        } else {\n            q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)(recordsRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('date', '==', date));\n        }\n        const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(q);\n        return querySnapshot.docs.map((doc)=>({\n                id: doc.id,\n                ...doc.data()\n            }));\n    } catch (error) {\n        console.error('Error getting staff records:', error.message);\n        return [];\n    }\n};\n/**\n * ฟังก์ชันบันทึกข้อมูล staff records\n */ const saveStaffRecord = async function(recordData) {\n    let recordId = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;\n    try {\n        if (recordId) {\n            // Update existing record\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.updateDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, 'staffRecords', recordId), {\n                ...recordData,\n                lastModified: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)()\n            });\n            return {\n                success: true,\n                id: recordId\n            };\n        } else {\n            // Create new record\n            const docRef = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.addDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, 'staffRecords'), {\n                ...recordData,\n                timestamp: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)(),\n                lastModified: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)()\n            });\n            return {\n                success: true,\n                id: docRef.id\n            };\n        }\n    } catch (error) {\n        console.error('Error saving staff record:', error.message);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n};\n/**\n * ฟังก์ชันบันทึกข้อมูล ward daily records\n */ const saveWardDailyRecord = async (wardData)=>{\n    try {\n        const { wardId, date } = wardData;\n        const docId = \"\".concat(date, \"_\").concat(wardId);\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.setDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, 'wardDailyRecords', docId), {\n            ...wardData,\n            lastUpdated: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)()\n        }, {\n            merge: true\n        });\n        return {\n            success: true,\n            id: docId\n        };\n    } catch (error) {\n        console.error('Error saving ward daily record:', error.message);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n};\n/**\n * ฟังก์ชันดึงข้อมูลผู้ใช้ทั้งหมด\n */ const getAllUsers = async ()=>{\n    try {\n        const usersRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, 'users');\n        const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(usersRef);\n        return querySnapshot.docs.map((doc)=>({\n                id: doc.id,\n                ...doc.data()\n            }));\n    } catch (error) {\n        console.error('Error getting users:', error.message);\n        return [];\n    }\n};\n/**\n * ฟังก์ชันเพิ่มผู้ใช้ใหม่\n */ const addUser = async (userData)=>{\n    try {\n        const userDataWithTimestamps = {\n            ...userData,\n            createdAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)(),\n            updatedAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)()\n        };\n        const docRef = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.addDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, 'users'), userDataWithTimestamps);\n        return {\n            success: true,\n            id: docRef.id\n        };\n    } catch (error) {\n        console.error('Error adding user:', error.message);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n};\n/**\n * ฟังก์ชันอัพเดทข้อมูลผู้ใช้\n */ const updateUser = async (userId, userData)=>{\n    try {\n        const userDataWithTimestamp = {\n            ...userData,\n            updatedAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)()\n        };\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.updateDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, 'users', userId), userDataWithTimestamp);\n        return {\n            success: true\n        };\n    } catch (error) {\n        console.error('Error updating user:', error.message);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n};\n/**\n * ฟังก์ชันลบผู้ใช้\n */ const deleteUser = async (userId)=>{\n    try {\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.deleteDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, 'users', userId));\n        return {\n            success: true\n        };\n    } catch (error) {\n        console.error('Error deleting user:', error.message);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n};\n/**\n * ฟังก์ชันอัพเดทข้อมูล firstName, lastName และ position จาก fullName และ role สำหรับผู้ใช้ทั้งหมด\n * สำหรับ Admin ใช้งาน (กรณีที่ต้องการอัพเดทข้อมูลทั้งหมดในครั้งเดียว)\n */ const updateAllUsersNameFields = async ()=>{\n    try {\n        const users = await getAllUsers();\n        const updatePromises = users.map(async (user)=>{\n            const updates = {};\n            // แยก firstname และ lastname จาก fullName\n            if ((!user.firstName || !user.lastName) && user.fullName) {\n                const nameParts = (user.fullName || '').split(' ');\n                updates.firstName = nameParts[0] || '';\n                updates.lastName = nameParts.slice(1).join(' ') || '';\n            }\n            // กำหนด position ตาม role ถ้ายังไม่มี\n            if (!user.position) {\n                if (user.role && user.role.toLowerCase() === 'admin') {\n                    updates.position = 'ผู้ดูแลระบบ';\n                } else {\n                    updates.position = 'เจ้าหน้าที่พยาบาล'; // ค่าเริ่มต้นสำหรับ user ทั่วไป\n                }\n            }\n            // อัพเดทเฉพาะถ้ามีข้อมูลที่ต้องอัพเดท\n            if (Object.keys(updates).length > 0) {\n                updates.updatedAt = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)();\n                return (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.updateDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, 'users', user.id), updates);\n            }\n            return Promise.resolve(); // ไม่ต้องอัพเดทถ้าไม่มีข้อมูลที่ต้องเปลี่ยน\n        });\n        await Promise.all(updatePromises);\n        return {\n            success: true,\n            message: 'Updated all users successfully'\n        };\n    } catch (error) {\n        console.error('Error updating users:', error.message);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n};\n/**\n * ฟังก์ชันตรวจสอบ active session ของผู้ใช้\n */ const checkActiveSession = async (userId)=>{\n    try {\n        const sessionsRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, 'userSessions');\n        const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)(sessionsRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('userId', '==', userId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('active', '==', true));\n        const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(q);\n        if (querySnapshot.empty) {\n            return null;\n        }\n        // ถ้ามี session ที่ active อยู่ ให้ return ข้อมูล session นั้น\n        const sessionDoc = querySnapshot.docs[0];\n        return {\n            id: sessionDoc.id,\n            ...sessionDoc.data()\n        };\n    } catch (error) {\n        console.error('Error checking active session:', error.message);\n        return null;\n    }\n};\n/**\n * ฟังก์ชันยกเลิก session\n */ const invalidateSession = async (sessionId)=>{\n    try {\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.updateDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, 'userSessions', sessionId), {\n            active: false,\n            logoutTime: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)()\n        });\n        return true;\n    } catch (error) {\n        console.error('Error invalidating session:', error.message);\n        return false;\n    }\n};\n/**\n * ฟังก์ชันสร้าง session ใหม่\n */ const createUserSession = async (userId, username)=>{\n    try {\n        const sessionData = {\n            userId,\n            username,\n            loginTime: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)(),\n            active: true,\n            device:  true ? navigator.userAgent : 0,\n            ip: 'Unknown' // ในสภาพแวดล้อมจริงควรใช้บริการดึง IP จากภายนอก\n        };\n        const docRef = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.addDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, 'userSessions'), sessionData);\n        return docRef.id;\n    } catch (error) {\n        console.error('Error creating user session:', error.message);\n        throw error;\n    }\n};\n/**\n * ฟังก์ชันตรวจสอบความถูกต้องของ session\n */ const validateSession = async (userId, sessionId)=>{\n    if (!userId || !sessionId) return false;\n    try {\n        const sessionDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, 'userSessions', sessionId));\n        if (!sessionDoc.exists()) {\n            return false;\n        }\n        const sessionData = sessionDoc.data();\n        return sessionData.userId === userId && sessionData.active === true;\n    } catch (error) {\n        console.error('Error validating session:', error.message);\n        return false;\n    }\n};\n/**\n * ฟังก์ชันตรวจสอบข้อมูลย้อนหลัง 7 วัน\n * @param {string} wardId - รหัสวอร์ด\n * @param {Date} currentDate - วันที่ปัจจุบัน\n * @returns {Promise<Object>} - ผลการตรวจสอบข้อมูล\n */ const checkLast7DaysData = async (wardId, currentDate)=>{\n    try {\n        // คำนวณวันที่ 7 วันย้อนหลัง\n        const sevenDaysAgo = new Date(currentDate);\n        sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);\n        // แปลงวันที่เป็น string format ปี-เดือน-วัน\n        const formatDate = (date)=>{\n            const year = date.getFullYear();\n            const month = String(date.getMonth() + 1).padStart(2, '0');\n            const day = String(date.getDate()).padStart(2, '0');\n            return \"\".concat(year, \"-\").concat(month, \"-\").concat(day);\n        };\n        const currentDateString = formatDate(currentDate);\n        const sevenDaysAgoString = formatDate(sevenDaysAgo);\n        // สร้างรายการวันที่ทั้ง 7 วันที่ผ่านมา\n        const dateList = [];\n        for(let i = 1; i <= 7; i++){\n            const date = new Date(currentDate);\n            date.setDate(date.getDate() - i);\n            dateList.push(formatDate(date));\n        }\n        // ตรวจสอบข้อมูลใน wardData collection\n        const wardDataRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, 'wardData');\n        const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)(wardDataRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('wardId', '==', wardId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('date', 'in', dateList));\n        const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(q);\n        // เก็บวันที่ที่มีข้อมูล\n        const datesWithData = new Set();\n        querySnapshot.docs.forEach((doc)=>{\n            const data = doc.data();\n            datesWithData.add(data.date);\n        });\n        // ถ้าไม่มีข้อมูลย้อนหลัง 7 วันเลย\n        if (datesWithData.size === 0) {\n            return {\n                hasData: false,\n                message: 'ไม่พบข้อมูลย้อนหลัง 7 วันที่ผ่านมา กรุณาติดต่อผู้ดูแลระบบเพื่อตรวจสอบ',\n                datesChecked: dateList,\n                datesWithData: Array.from(datesWithData)\n            };\n        }\n        // ถ้ามีข้อมูลอย่างน้อย 1 วัน\n        return {\n            hasData: true,\n            message: 'พบข้อมูลย้อนหลังในช่วง 7 วันที่ผ่านมา',\n            datesChecked: dateList,\n            datesWithData: Array.from(datesWithData)\n        };\n    } catch (error) {\n        console.error('Error checking last 7 days data:', error.message);\n        return {\n            hasData: false,\n            error: error.message,\n            message: 'เกิดข้อผิดพลาดในการตรวจสอบข้อมูลย้อนหลัง 7 วัน'\n        };\n    }\n};\n/**\n * ฟังก์ชันบันทึกข้อมูลฉบับร่าง (Save Draft)\n * @param {Object} draftData - ข้อมูลฉบับร่าง\n * @returns {Promise<Object>} - ผลการบันทึกข้อมูล\n */ const saveWardDataDraft = async (draftData)=>{\n    try {\n        const { wardId, date, shift, userId } = draftData;\n        // สร้าง docId ที่ไม่ซ้ำกัน โดยรวม wardId, date, shift และ userId\n        const docId = \"\".concat(wardId, \"_\").concat(date, \"_\").concat(shift, \"_\").concat(userId);\n        // เพิ่ม timestamp\n        const dataWithTimestamp = {\n            ...draftData,\n            lastUpdated: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)(),\n            isDraft: true\n        };\n        // บันทึกลงใน collection wardDataDrafts\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.setDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, 'wardDataDrafts', docId), dataWithTimestamp, {\n            merge: true\n        });\n        return {\n            success: true,\n            id: docId,\n            message: 'บันทึกข้อมูลฉบับร่างเรียบร้อยแล้ว'\n        };\n    } catch (error) {\n        console.error('Error saving ward data draft:', error.message);\n        return {\n            success: false,\n            error: error.message,\n            message: 'เกิดข้อผิดพลาดในการบันทึกข้อมูลฉบับร่าง'\n        };\n    }\n};\n/**\n * ฟังก์ชันดึงข้อมูลฉบับร่างของผู้ใช้\n * @param {string} userId - รหัสผู้ใช้\n * @param {string} wardId - รหัสวอร์ด (optional)\n * @param {string} date - วันที่ (optional)\n * @param {string} shift - กะ (optional)\n * @returns {Promise<Array>} - รายการข้อมูลฉบับร่าง\n */ const getUserDrafts = async function(userId) {\n    let wardId = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null, date = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null, shift = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;\n    try {\n        const draftsRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, 'wardDataDrafts');\n        let conditions = [\n            (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('userId', '==', userId)\n        ];\n        if (wardId) {\n            conditions.push((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('wardId', '==', wardId));\n        }\n        if (date) {\n            conditions.push((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('date', '==', date));\n        }\n        if (shift) {\n            conditions.push((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('shift', '==', shift));\n        }\n        // สร้าง query ตามเงื่อนไขที่กำหนด\n        const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)(draftsRef, ...conditions);\n        const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(q);\n        if (querySnapshot.empty) {\n            return [];\n        }\n        return querySnapshot.docs.map((doc)=>({\n                id: doc.id,\n                ...doc.data()\n            }));\n    } catch (error) {\n        console.error('Error getting user drafts:', error.message);\n        return [];\n    }\n};\n/**\n * ฟังก์ชันลบข้อมูลฉบับร่าง\n * @param {string} draftId - รหัสฉบับร่าง\n * @returns {Promise<Object>} - ผลการลบข้อมูล\n */ const deleteWardDataDraft = async (draftId)=>{\n    try {\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.deleteDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, 'wardDataDrafts', draftId));\n        return {\n            success: true,\n            message: 'ลบข้อมูลฉบับร่างเรียบร้อยแล้ว'\n        };\n    } catch (error) {\n        console.error('Error deleting ward data draft:', error.message);\n        return {\n            success: false,\n            error: error.message,\n            message: 'เกิดข้อผิดพลาดในการลบข้อมูลฉบับร่าง'\n        };\n    }\n};\n/**\n * ฟังก์ชันดึงข้อมูลฉบับร่างล่าสุดของผู้ใช้\n * @param {string} userId - รหัสผู้ใช้\n * @param {string} wardId - รหัสวอร์ด\n * @param {string} date - วันที่\n * @param {string} shift - กะ\n * @returns {Promise<Object|null>} - ข้อมูลฉบับร่างล่าสุด หรือ null ถ้าไม่มี\n */ const getLatestDraft = async (userId, wardId, date, shift)=>{\n    try {\n        // ค้นหาฉบับร่างล่าสุดตามเงื่อนไข\n        const draftsRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, 'wardDataDrafts');\n        const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)(draftsRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('userId', '==', userId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('wardId', '==', wardId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('date', '==', date), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('shift', '==', shift));\n        const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(q);\n        if (querySnapshot.empty) {\n            return null;\n        }\n        // หากมีหลายฉบับร่าง ให้เลือกฉบับล่าสุดตาม timestamp\n        let latestDraft = null;\n        let latestTimestamp = 0;\n        querySnapshot.docs.forEach((doc)=>{\n            var _data_lastUpdated;\n            const data = doc.data();\n            const timestamp = ((_data_lastUpdated = data.lastUpdated) === null || _data_lastUpdated === void 0 ? void 0 : _data_lastUpdated.seconds) || 0;\n            if (timestamp > latestTimestamp) {\n                latestTimestamp = timestamp;\n                latestDraft = {\n                    id: doc.id,\n                    ...data\n                };\n            }\n        });\n        return latestDraft;\n    } catch (error) {\n        console.error('Error getting latest draft:', error.message);\n        return null;\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/lib/dataAccess.js\n"));

/***/ })

});