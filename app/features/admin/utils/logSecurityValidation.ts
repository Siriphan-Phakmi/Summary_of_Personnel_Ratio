import { UserRole, User } from '@/app/features/auth/types/user';

/**
 * Security validation for log deletion operations
 * Only DEVELOPER role is allowed to perform bulk delete operations
 */

export interface SecurityValidationResult {
  isAllowed: boolean;
  reason?: string;
  userRole: UserRole | 'UNKNOWN';
}

/**
 * Validates if user has permission to delete all logs
 * @param user Current user
 * @returns Validation result
 */
export const validateDeleteAllLogsPermission = (user: User | null): SecurityValidationResult => {
  if (!user) {
    return {
      isAllowed: false,
      reason: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà',
      userRole: 'UNKNOWN'
    };
  }

  if (user.role !== UserRole.DEVELOPER) {
    return {
      isAllowed: false,
      reason: `‡∏Å‡∏≤‡∏£‡∏•‡∏ö logs ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ DEVELOPER ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ${user.role})`,
      userRole: user.role
    };
  }

  if (!user.isActive) {
    return {
      isAllowed: false,
      reason: '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ',
      userRole: user.role
    };
  }

  return {
    isAllowed: true,
    userRole: user.role
  };
};

/**
 * Validates if user has permission to delete selected logs
 * @param user Current user
 * @param selectedCount Number of selected logs
 * @returns Validation result
 */
export const validateDeleteSelectedLogsPermission = (user: User | null, selectedCount: number): SecurityValidationResult => {
  if (!user) {
    return {
      isAllowed: false,
      reason: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà',
      userRole: 'UNKNOWN'
    };
  }

  if (selectedCount === 0) {
    return {
      isAllowed: false,
      reason: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏ö',
      userRole: user.role
    };
  }

  // Allow DEVELOPER and ADMIN to delete selected logs
  if (user.role !== UserRole.DEVELOPER && user.role !== UserRole.ADMIN) {
    return {
      isAllowed: false,
      reason: `‡∏Å‡∏≤‡∏£‡∏•‡∏ö logs ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ DEVELOPER ‡πÅ‡∏•‡∏∞ ADMIN ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ${user.role})`,
      userRole: user.role
    };
  }

  if (!user.isActive) {
    return {
      isAllowed: false,
      reason: '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ',
      userRole: user.role
    };
  }

  // Extra validation for large selections (> 100 logs)
  if (selectedCount > 100 && user.role !== UserRole.DEVELOPER) {
    return {
      isAllowed: false,
      reason: `‡∏Å‡∏≤‡∏£‡∏•‡∏ö logs ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 100 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå DEVELOPER (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ: ${selectedCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)`,
      userRole: user.role
    };
  }

  return {
    isAllowed: true,
    userRole: user.role
  };
};

/**
 * Validates if user has permission to perform cleanup operations
 * @param user Current user
 * @param days Number of days for cleanup
 * @returns Validation result
 */
export const validateCleanupLogsPermission = (user: User | null, days: number): SecurityValidationResult => {
  if (!user) {
    return {
      isAllowed: false,
      reason: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà',
      userRole: 'UNKNOWN'
    };
  }

  // Allow DEVELOPER and ADMIN to perform cleanup
  if (user.role !== UserRole.DEVELOPER && user.role !== UserRole.ADMIN) {
    return {
      isAllowed: false,
      reason: `‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î logs ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ DEVELOPER ‡πÅ‡∏•‡∏∞ ADMIN ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ${user.role})`,
      userRole: user.role
    };
  }

  if (!user.isActive) {
    return {
      isAllowed: false,
      reason: '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ',
      userRole: user.role
    };
  }

  if (days <= 0) {
    return {
      isAllowed: false,
      reason: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ö‡∏ß‡∏Å',
      userRole: user.role
    };
  }

  // Extra caution for very recent logs (< 7 days)
  if (days < 7 && user.role !== UserRole.DEVELOPER) {
    return {
      isAllowed: false,
      reason: `‡∏Å‡∏≤‡∏£‡∏•‡∏ö logs ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏¢‡∏∏‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 7 ‡∏ß‡∏±‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå DEVELOPER (‡∏£‡∏∞‡∏ö‡∏∏: ${days} ‡∏ß‡∏±‡∏ô)`,
      userRole: user.role
    };
  }

  return {
    isAllowed: true,
    userRole: user.role
  };
};

/**
 * Logs security violations for audit purposes
 * @param user User who attempted the action
 * @param action Action that was attempted
 * @param reason Reason for denial
 */
export const logSecurityViolation = async (user: User | null, action: string, reason: string): Promise<void> => {
  console.warn(`üö® [SECURITY_VIOLATION] User: ${user?.username || 'unknown'} (${user?.role || 'unknown'}) attempted: ${action}. Denied: ${reason}`);
  
  // In a real application, you might want to save this to a separate security audit log
  // await saveSecurityAuditLog({ user, action, reason, timestamp: new Date() });
}; 