import { doc, setDoc, deleteDoc, getDoc, onSnapshot, serverTimestamp, Timestamp } from 'firebase/firestore';
import { db } from '@/app/lib/firebase/firebase';
import { User } from '@/app/features/auth/types/user';
import { Logger } from '@/app/lib/utils/logger';

/**
 * üîí Firestore Session Manager - Single Active Session Control
 * ‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£: Force Logout ‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ Login ‡πÉ‡∏´‡∏°‡πà
 * ‡πÉ‡∏ä‡πâ Firestore ‡πÅ‡∏ó‡∏ô Realtime Database ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏à‡∏≤‡∏Å security rules ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
 */

interface FirestoreSession {
  sessionId: string;
  userId: string;
  username: string;
  loginTime: Timestamp;
  lastActivity: Timestamp;
  userAgent: string;
  ipAddress: string;
  isActive: boolean;
  createdAt: Timestamp;
  updatedAt: Timestamp;
}

export class FirestoreSessionManager {
  private static instance: FirestoreSessionManager;
  private currentSessionId: string | null = null;
  private sessionUnsubscribe: (() => void) | null = null;
  private lastActivityUpdate: number = 0;
  private activityUpdateInterval: NodeJS.Timeout | null = null;

  private constructor() {}

  public static getInstance(): FirestoreSessionManager {
    if (!FirestoreSessionManager.instance) {
      FirestoreSessionManager.instance = new FirestoreSessionManager();
    }
    return FirestoreSessionManager.instance;
  }

  /**
   * üîê ‡∏™‡∏£‡πâ‡∏≤‡∏á Session ‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞ Force Logout Session ‡πÄ‡∏Å‡πà‡∏≤
   */
  public async createNewSession(
    user: User,
    clientInfo: { userAgent: string; ipAddress: string }
  ): Promise<string> {
    try {
      // ‚úÖ Defensive: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Firestore connection
      if (!db) {
        Logger.warn('[FirestoreSessionManager] Firestore not available');
        return `fallback_session_${Date.now()}`;
      }

      const sessionId = `session_${user.uid}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      const now = Timestamp.now();

      // 1. ‡∏•‡∏ö session ‡πÄ‡∏Å‡πà‡∏≤ (‡∏´‡∏•‡∏≤‡∏¢ session ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ô Firestore rules)
      await this.cleanupOldSession(user.uid);

      // 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á session ‡πÉ‡∏´‡∏°‡πà
      const newSession: FirestoreSession = {
        sessionId,
        userId: user.uid,
        username: user.username,
        loginTime: now,
        lastActivity: now,
        userAgent: clientInfo.userAgent || 'unknown',
        ipAddress: clientInfo.ipAddress || '127.0.0.1',
        isActive: true,
        createdAt: now,
        updatedAt: now,
      };

      // 3. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Firestore (‡πÑ‡∏°‡πà‡∏°‡∏µ timeout ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ Firestore ‡∏°‡∏µ built-in retry)
      const sessionDocRef = doc(db, 'currentSessions', user.uid);
      await setDoc(sessionDocRef, newSession);

      this.currentSessionId = sessionId;
      
      // ‡πÄ‡∏£‡∏¥‡πà‡∏° activity update interval
      this.startActivityUpdater(user.uid);
      
      Logger.info(`[FirestoreSessionManager] Created new session ${sessionId} for user ${user.username}`);

      return sessionId;
    } catch (error) {
      Logger.error('[FirestoreSessionManager] Failed to create new session:', error);
      
      // ‚úÖ Fallback: Return generated session ID
      const fallbackSessionId = `fallback_session_${Date.now()}`;
      this.currentSessionId = fallbackSessionId;
      
      Logger.warn(`[FirestoreSessionManager] Using fallback session: ${fallbackSessionId}`);
      return fallbackSessionId;
    }
  }

  /**
   * üö´ Clean up old session
   */
  private async cleanupOldSession(userId: string): Promise<void> {
    try {
      const sessionDocRef = doc(db, 'currentSessions', userId);
      const sessionDoc = await getDoc(sessionDocRef);
      
      if (sessionDoc.exists()) {
        Logger.info(`[FirestoreSessionManager] Cleaning up old session for user ${userId}`);
        await deleteDoc(sessionDocRef);
      }
    } catch (error) {
      Logger.warn('[FirestoreSessionManager] Failed to cleanup old session:', error);
      // ‡πÑ‡∏°‡πà throw error ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ login fail
    }
  }

  /**
   * üéß ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° Session Changes ‡πÄ‡∏û‡∏∑‡πà‡∏≠ Detect Force Logout
   */
  public startSessionMonitoring(userId: string, onForceLogout: () => void): void {
    try {
      if (!db) {
        Logger.warn('[FirestoreSessionManager] Firestore not available for monitoring');
        return;
      }

      const sessionDocRef = doc(db, 'currentSessions', userId);
      
      this.sessionUnsubscribe = onSnapshot(sessionDocRef, (docSnapshot) => {
        if (!docSnapshot.exists()) {
          Logger.warn(`[FirestoreSessionManager] Session removed for user ${userId} - Force logout detected`);
          onForceLogout();
          return;
        }

        const sessionData = docSnapshot.data() as FirestoreSession;
        
        if (!sessionData.isActive) {
          Logger.warn(`[FirestoreSessionManager] Session deactivated for user ${userId}`);
          onForceLogout();
          return;
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô session ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (this.currentSessionId && sessionData.sessionId !== this.currentSessionId) {
          Logger.warn(`[FirestoreSessionManager] Session conflict detected - Current: ${this.currentSessionId}, Active: ${sessionData.sessionId}`);
          onForceLogout();
          return;
        }
      }, (error) => {
        Logger.error('[FirestoreSessionManager] Session monitoring error:', error);
      });

      Logger.info(`[FirestoreSessionManager] Started session monitoring for user ${userId}`);
    } catch (error) {
      Logger.error('[FirestoreSessionManager] Failed to start session monitoring:', error);
    }
  }

  /**
   * üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏° Activity Updater (‡πÉ‡∏ä‡πâ interval ‡πÅ‡∏ó‡∏ô manual update)
   */
  private startActivityUpdater(userId: string): void {
    // Clear existing interval
    if (this.activityUpdateInterval) {
      clearInterval(this.activityUpdateInterval);
    }

    // Update activity every 30 seconds
    this.activityUpdateInterval = setInterval(async () => {
      try {
        if (!this.currentSessionId || !db) return;

        const sessionDocRef = doc(db, 'currentSessions', userId);
        await setDoc(sessionDocRef, {
          lastActivity: Timestamp.now(),
          updatedAt: Timestamp.now(),
        }, { merge: true });

      } catch (error) {
        Logger.warn('[FirestoreSessionManager] Failed to update activity:', error);
      }
    }, 30000); // 30 seconds interval
  }

  /**
   * ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Session ‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   */
  public async isSessionValid(userId: string, sessionId: string): Promise<boolean> {
    try {
      if (!db) return false;

      const sessionDocRef = doc(db, 'currentSessions', userId);
      const sessionDoc = await getDoc(sessionDocRef);
      
      if (!sessionDoc.exists()) {
        return false;
      }

      const sessionData = sessionDoc.data() as FirestoreSession;
      return sessionData.isActive && sessionData.sessionId === sessionId;
    } catch (error) {
      Logger.error('[FirestoreSessionManager] Failed to validate session:', error);
      return false;
    }
  }

  /**
   * üö™ ‡∏•‡∏ö Session ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (Logout)
   */
  public async removeCurrentSession(userId: string): Promise<void> {
    try {
      // ‡∏´‡∏¢‡∏∏‡∏î session monitoring
      if (this.sessionUnsubscribe) {
        this.sessionUnsubscribe();
        this.sessionUnsubscribe = null;
      }

      // ‡∏´‡∏¢‡∏∏‡∏î activity updater
      if (this.activityUpdateInterval) {
        clearInterval(this.activityUpdateInterval);
        this.activityUpdateInterval = null;
      }

      // ‡∏•‡∏ö session ‡∏à‡∏≤‡∏Å Firestore
      if (db) {
        const sessionDocRef = doc(db, 'currentSessions', userId);
        await deleteDoc(sessionDocRef);
      }

      this.currentSessionId = null;
      
      Logger.info(`[FirestoreSessionManager] Removed current session for user ${userId}`);
    } catch (error) {
      Logger.error('[FirestoreSessionManager] Failed to remove current session:', error);
      throw error;
    }
  }

  /**
   * üõë ‡∏´‡∏¢‡∏∏‡∏î Session Monitoring
   */
  public stopSessionMonitoring(): void {
    try {
      if (this.sessionUnsubscribe) {
        this.sessionUnsubscribe();
        this.sessionUnsubscribe = null;
        Logger.info('[FirestoreSessionManager] Stopped session monitoring');
      }

      if (this.activityUpdateInterval) {
        clearInterval(this.activityUpdateInterval);
        this.activityUpdateInterval = null;
      }
    } catch (error) {
      Logger.error('[FirestoreSessionManager] Failed to stop session monitoring:', error);
    }
  }

  /**
   * üìä ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Session ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
   */
  public getCurrentSessionId(): string | null {
    return this.currentSessionId;
  }

  /**
   * üßπ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î Resources (‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠ component unmount)
   */
  public cleanup(): void {
    this.stopSessionMonitoring();
    this.currentSessionId = null;
  }
}

export default FirestoreSessionManager;